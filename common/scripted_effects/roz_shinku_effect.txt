roz_junn_country_create = {
	create_country = {
		name = "NAME_nfield_junn"
		type = ge_N_Field
		flag = {
			icon = {
				category = "nfield_junn"
				file = "flag_roz_junn.dds"
			}
			background = {
				category = "backgrounds"
				file = "inverted_v.dds"
			}
			colors = {
				"black"
				"black"
				"null"
				"null"
			}
		}
		effect = {
			save_global_event_target_as = roz_junn_global_country@root
			set_country_flag = roz_junn_country
		}
	}
	last_created_country = {
		establish_communications_no_message = root
	}
	event_target:roz_junn_global_country@root = {
		owner = {
		}
	}
}

roz_hinaichigo_country_create = {
	create_country = {
		name = "NAME_nfield_hinaichigo"
		type = ge_N_Field
		flag = {
			icon = {
				category = "nfield_hinaichigo"
				file = "flag_roz_hinaichigo.dds"
			}
			background = {
				category = "backgrounds"
				file = "inverted_v.dds"
			}
			colors = {
				"black"
				"black"
				"null"
				"null"
			}
		}
		effect = {
			save_global_event_target_as = roz_hinaichigo_global_country@root
			set_country_flag = roz_hinaichigo_country
		}
	}
	last_created_country = {
		establish_communications_no_message = root
	}
	set_country_flag = roz_hinaichigo_arrive
}

roz_madgod_country_initiate = {
	create_country = {
		name = NAME_madgod_force_country
		type = enclave
		authority = "auth_oligarchic"
		civics = {
			civic = civic_ancient_preservers
		}
		origin = "origin_default"
		species = last_created_species
		flag = {
			icon = {
				category = special
				file = "shroudwalkers.dds"
			}
			background = {
				category = "backgrounds"
				file = "vertical.dds"
			}
			colors = {
				"red"
				"red"
				"null"
				"null"
			}
		}
		ethos = {
			ethic = ethic_fanatic_militarist
		}
		ignore_initial_colony_error = yes
	}
	last_created_country = {
		set_country_flag = roz_madgod_force_country_flag
		set_graphical_culture = necroid_01
		save_global_event_target_as = roz_madgod_force_country@root
		set_hostile = root
		establish_communications_no_message = root
	}
}

roz_madgod_fleet_jtcl_create_direct = {
	#方案一
	event_target:roz_madgod_force_country@root = {
		create_fleet = {
			name = "NAME_roz_krks_zakko"
			settings = {
				spawn_debris = no
				is_boss = yes
			}
			effect = {
				set_fleet_flag = roz_madgod_jtcl_fleet
				while = {
					count = 12
					create_ship = {
						name = "NAME_EDDY_ROZ"
						design = "NAME_Corrupted_Avatar"
						effect = {
						}
					}
				}
				set_location = event_target:roz_n_field_site_target@root
				set_fleet_stance = aggressive
				set_aggro_range_measure_from = return_point
				set_aggro_range = 300
				add_modifier = {
					modifier = roz_krks_bf_stage1_HK_buff
					mult = 0.75
				}
			}
		}
	}
}

roz_madgod_fleet_jtcl_create_decoy = {
	#方案二
	event_target:roz_madgod_force_country@root = {
		create_fleet = {
			name = "NAME_roz_krks_zakko"
			settings = {
				spawn_debris = no
				is_boss = yes
			}
			effect = {
				set_fleet_flag = roz_madgod_jtcl_fleet
				while = {
					count = 8
					create_ship = {
						name = "NAME_EDDY_ROZ"
						design = "NAME_Corrupted_Avatar"
						effect = {
						}
					}
				}
				set_location = event_target:roz_n_field_site_target@root
				set_fleet_stance = aggressive
				set_aggro_range_measure_from = return_point
				set_aggro_range = 300
				add_modifier = {
					modifier = roz_krks_bf_stage1_HK_buff
					mult = 0.5
				}
			}
		}
	}
}

###感染体入侵
###比较ai态度，计算数量
roz_SK_invasion_dip_effect = {
	while = {
		limit = {
			any_playable_country = {
				opinion_level = {
					who = root
					level $sign$ $opinion$
				}
				NOT = {
					has_country_flag = roz_SK_invasion_dip_$opinion$_ai_flag
				}
			}
		}
		random_playable_country = {
			limit = {
				NOT = {
					has_country_flag = roz_SK_invasion_dip_$opinion$_ai_flag
				}
			}
			set_country_flag = roz_SK_invasion_dip_$opinion$_ai_flag
		}
		change_variable = {
			which = roz_SK_invasion_dip_$opinion$_ai
			value = 1
		}
	}
}

# roz_SK_invasion_dip_aggressive_effect = {
# 	while = {
# 		#支持者
# 		limit = {
# 			any_playable_country = {
# 				opinion_level = {
# 					who = root
# 					level >= good
# 				}
# 				NOT = {
# 					has_country_flag = roz_SK_invasion_dip_aggressive_ai_flag
# 				}
# 			}
# 		}
# 		random_playable_country = {
# 			limit = {
# 				NOT = {
# 					has_country_flag = roz_SK_invasion_dip_aggressive_ai_flag
# 				}
# 			}
# 			set_country_flag = roz_SK_invasion_dip_aggressive_ai_flag
# 		}
# 		change_variable = {
# 			which = roz_SK_invasion_dip_aggressive_ai
# 			value = 1
# 		}
# 	}
# }

# roz_SK_invasion_dip_negative_effect = {
# 	while = {
# 		#反对者
# 		limit = {
# 			any_playable_country = {
# 				opinion_level = {
# 					who = root
# 					level <= poor
# 				}
# 				NOT = {
# 					has_country_flag = roz_SK_invasion_dip_negative_ai_flag
# 				}
# 			}
# 		}
# 		random_playable_country = {
# 			limit = {
# 				NOT = {
# 					has_country_flag = roz_SK_invasion_dip_negative_ai_flag
# 				}
# 			}
# 			set_country_flag = roz_SK_invasion_dip_negative_ai_flag
# 		}
# 		change_variable = {
# 			which = roz_SK_invasion_dip_negative_ai
# 			value = 1
# 		}
# 	}
# }

# roz_SK_invasion_dip_neutral_effect = {
# 	while = {
# 		#中立者
# 		limit = {
# 			any_playable_country = {
# 				opinion_level = {
# 					who = root
# 					level = neutral
# 				}
# 				NOT = {
# 					has_country_flag = roz_SK_invasion_dip_neutral_ai_flag
# 				}
# 			}
# 		}
# 		random_playable_country = {
# 			limit = {
# 				NOT = {
# 					has_country_flag = roz_SK_invasion_dip_neutral_ai_flag
# 				}
# 			}
# 			set_country_flag = roz_SK_invasion_dip_neutral_ai_flag
# 		}
# 		change_variable = {
# 			which = roz_SK_invasion_dip_neutral_ai
# 			value = 1
# 		}
# 	}
# }

###真红初始化

###真红-切换科学家职位
roz_shinku_leader_type_switch_scientist = {
	optimize_memory
	set_country_flag = roz_shinku_scientist_active
	#若当前真红职位为指挥官
	if = {
		limit = {
			event_target:roz_leader_shinku_global_target@root = {
				leader_class = commander
			}
		}
		remove_country_flag = roz_shinku_commander_active
		#缓存国家目标领袖更新替换
		event_target:roz_shinku_commander_inactive_temp@root = { 
		kill_leader = {
				show_notification = no
			}
		}
		clear_global_event_target = roz_shinku_commander_inactive_temp@root
		clone_leader = {
			#event_target:roz_shinku_global_country是真红的缓存国家
			#target = event_target:roz_leader_shinku_global_target@root #这个global target是玩家的真红
			##clone leader的effect有时不会继承领袖的leader flag和variable（变量完全不能继承），自定义背景也没有，最好补上
			target = event_target:roz_leader_shinku_global_target@root   
			effect = {
				save_global_event_target_as = roz_shinku_commander_inactive_temp@root
				roz_leader_pending_negative_traits_unmodified_count = yes
				roz_leader_type_switch_clone_initiate_effect = {
					leader = shinku
					leader_sc = zhenhong
					country = shinku_global_country
				}
				#东方繁星录兼容
				if = {
					limit = { this = { spth_check_gensokyo_auth = yes } }
					set_leader_flag = own_th_leader_trait
				}
			}
		}
		#移除玩家的指挥官真红
		event_target:roz_leader_shinku_global_target@root = {
			kill_leader = {
				show_notification = no
			}
		}
		#创建或从缓存国家复制科学家真红
		roz_leader_type_switch_create_leader_initiate_effect = {
			leader = shinku
			leader_sc = zhenhong
			leader_type = scientist
			symbolic_trait_1 = leader_trait_roz_shinku_main
			symbolic_trait_2 = leader_trait_roz
			symbolic_trait_3 = leader_trait_roz
		}
		
		roz_leader_initialize_after_create_effect = {
			leader = shinku
			leader_sc = zhenhong
			leader_type = scientist
		}
	}

	#若当前真红职位为行政官
	if = {
		limit = {
			event_target:roz_leader_shinku_global_target@root = {
				leader_class = official
			}
		}
		remove_country_flag = roz_shinku_official_active
		#缓存国家目标领袖更新替换, 先kill了再说
		event_target:roz_shinku_official_inactive_temp@root = { #令临时存储国家的舰队司令真红消失
		kill_leader = {
				show_notification = no
			}
		}
		clear_global_event_target = roz_shinku_official_inactive_temp@root
		clone_leader = {
			#替换，event_target:roz_shinku_global_country是真红的缓存国家
			#target = event_target:roz_leader_shinku_global_target@root #这个global target是玩家的真红
			target = event_target:roz_leader_shinku_global_target@root   #刚刚存的target
			effect = {
				save_global_event_target_as = roz_shinku_official_inactive_temp@root
				roz_leader_pending_negative_traits_unmodified_count = yes
				roz_leader_type_switch_clone_initiate_effect = {
					leader = shinku
					leader_sc = zhenhong
					country = shinku_global_country
				}
				#东方繁星录兼容
				if = {
					limit = { this = { spth_check_gensokyo_auth = yes } }
					set_leader_flag = own_th_leader_trait
				}
			}
		}
		#移除玩家的指挥官真红
		event_target:roz_leader_shinku_global_target@root = {
			kill_leader = {
				show_notification = no
			}
		}
		#创建或从缓存国家复制科学家真红
		roz_leader_type_switch_create_leader_initiate_effect = {
			leader = shinku
			leader_sc = zhenhong
			leader_type = scientist
			symbolic_trait_1 = leader_trait_roz_shinku_main
			symbolic_trait_2 = leader_trait_roz
			symbolic_trait_3 = leader_trait_roz
		}
		
		roz_leader_initialize_after_create_effect = {
			leader = shinku
			leader_sc = zhenhong
			leader_type = scientist
		}
	}
}

###真红-切换指挥官职位
roz_shinku_leader_type_switch_commander = {
	optimize_memory
	set_country_flag = roz_shinku_commander_active
	#若当前真红职位为科学家
	if = {
		limit = {
			event_target:roz_leader_shinku_global_target@root = {
				leader_class = scientist
			}
		}
		remove_country_flag = roz_shinku_scientist_active
		#缓存国家目标领袖更新替换
		event_target:roz_shinku_scientist_inactive_temp@root = { 
		kill_leader = {
				show_notification = no
			}
		}
		clear_global_event_target = roz_shinku_scientist_inactive_temp@root
		clone_leader = {
			#event_target:roz_shinku_global_country是真红的缓存国家
			#target = event_target:roz_leader_shinku_global_target@root #这个global target是玩家的真红
			target = event_target:roz_leader_shinku_global_target@root   
			effect = {
				save_global_event_target_as = roz_shinku_scientist_inactive_temp@root
				roz_leader_pending_negative_traits_unmodified_count = yes
				roz_leader_type_switch_clone_initiate_effect = {
					leader = shinku
					leader_sc = zhenhong
					country = shinku_global_country
				}
				#东方繁星录兼容
				if = {
					limit = { this = { spth_check_gensokyo_auth = yes } }
					set_leader_flag = own_th_leader_trait
				}
			}
		}
		#移除玩家的科学家真红
		event_target:roz_leader_shinku_global_target@root = {
			kill_leader = {
				show_notification = no
			}
		}
		#创建或从缓存国家复制指挥官真红
		roz_leader_type_switch_create_leader_initiate_effect = {
			leader = shinku
			leader_sc = zhenhong
			leader_type = commander
			symbolic_trait_1 = leader_trait_roz_shinku_main
			symbolic_trait_2 = leader_trait_roz
			symbolic_trait_3 = leader_trait_roz
		}
		
		roz_leader_initialize_after_create_effect = {
			leader = shinku
			leader_sc = zhenhong
			leader_type = commander
		}

		last_created_leader = {
			
		}
	}

	#若当前真红职位为行政官
	if = {
		limit = {
			event_target:roz_leader_shinku_global_target@root = {
				leader_class = official
			}
		}
		remove_country_flag = roz_shinku_official_active
		#缓存国家目标领袖更新替换, 先kill了再说
		event_target:roz_shinku_official_inactive_temp@root = { #令临时存储国家的舰队司令真红消失
		kill_leader = {
				show_notification = no
			}
		}
		clear_global_event_target = roz_shinku_official_inactive_temp@root
		clone_leader = {
			#替换，event_target:roz_shinku_global_country是真红的缓存国家
			#target = event_target:roz_leader_shinku_global_target@root #这个global target是玩家的真红
			target = event_target:roz_leader_shinku_global_target@root
			effect = {
				save_global_event_target_as = roz_shinku_official_inactive_temp@root
				roz_leader_pending_negative_traits_unmodified_count = yes
				roz_leader_type_switch_clone_initiate_effect = {
					leader = shinku
					leader_sc = zhenhong
					country = shinku_global_country
				}
				#东方繁星录兼容
				if = {
					limit = { this = { spth_check_gensokyo_auth = yes } }
					set_leader_flag = own_th_leader_trait
				}
			}
		}
		#移除玩家的指挥官真红
		event_target:roz_leader_shinku_global_target@root = {
			kill_leader = {
				show_notification = no
			}
		}
		#创建或从缓存国家复制指挥官真红
		roz_leader_type_switch_create_leader_initiate_effect = {
			leader = shinku
			leader_sc = zhenhong
			leader_type = commander
			symbolic_trait_1 = leader_trait_roz_shinku_main
			symbolic_trait_2 = leader_trait_roz
			symbolic_trait_3 = leader_trait_roz
		}
		
		roz_leader_initialize_after_create_effect = {
			leader = shinku
			leader_sc = zhenhong
			leader_type = commander
		}

		last_created_leader = {
			
		}
	}
}

###真红-切换行政官职位
roz_shinku_leader_type_switch_official = {
	optimize_memory
	set_country_flag = roz_shinku_official_active
	#若当前真红职位为科学家
	if = {
		limit = {
			event_target:roz_leader_shinku_global_target@root = {
				leader_class = scientist
			}
		}
		remove_country_flag = roz_shinku_scientist_active
		#缓存国家目标领袖更新替换
		event_target:roz_shinku_scientist_inactive_temp@root = { 
		kill_leader = {
				show_notification = no
			}
		}
		clear_global_event_target = roz_shinku_scientist_inactive_temp@root
		clone_leader = {
			#event_target:roz_shinku_global_country是真红的缓存国家
			#target = event_target:roz_leader_shinku_global_target@root #这个global target是玩家的真红
			target = event_target:roz_leader_shinku_global_target@root   
			effect = {
				save_global_event_target_as = roz_shinku_scientist_inactive_temp@root
				roz_leader_pending_negative_traits_unmodified_count = yes
				roz_leader_type_switch_clone_initiate_effect = {
					leader = shinku
					leader_sc = zhenhong
					country = shinku_global_country
				}
				#东方繁星录兼容
				if = {
					limit = { this = { spth_check_gensokyo_auth = yes } }
					set_leader_flag = own_th_leader_trait
				}
			}
		}
		#移除玩家的科学家真红
		event_target:roz_leader_shinku_global_target@root = {
			kill_leader = {
				show_notification = no
			}
		}
		#创建或从缓存国家复制行政官真红
		roz_leader_type_switch_create_leader_initiate_effect = {
			leader = shinku
			leader_sc = zhenhong
			leader_type = official
			symbolic_trait_1 = leader_trait_roz_shinku_main
			symbolic_trait_2 = leader_trait_roz
			symbolic_trait_3 = leader_trait_roz
		}
		
		roz_leader_initialize_after_create_effect = {
			leader = shinku
			leader_sc = zhenhong
			leader_type = official
		}
	}

	#若当前真红职位为指挥官
	if = {
		limit = {
			event_target:roz_leader_shinku_global_target@root = {
				leader_class = commander
			}
		}
		remove_country_flag = roz_shinku_commander_active
		#缓存国家目标领袖更新替换, 先kill了再说
		event_target:roz_shinku_commander_inactive_temp@root = { #令临时存储国家的舰队司令真红消失
		kill_leader = {
				show_notification = no
			}
		}
		clear_global_event_target = roz_shinku_commander_inactive_temp@root
		clone_leader = {
			#替换，event_target:roz_shinku_global_country是真红的缓存国家
			#target = event_target:roz_leader_shinku_global_target@root #这个global target是玩家的真红
			target = event_target:roz_leader_shinku_global_target@root
			effect = {
				save_global_event_target_as = roz_shinku_commander_inactive_temp@root
				roz_leader_pending_negative_traits_unmodified_count = yes
				roz_leader_type_switch_clone_initiate_effect = {
					leader = shinku
					leader_sc = zhenhong
					country = shinku_global_country
				}
				#东方繁星录兼容
				if = {
					limit = { this = { spth_check_gensokyo_auth = yes } }
					set_leader_flag = own_th_leader_trait
				}
			}
		}
		#移除玩家的指挥官真红
		event_target:roz_leader_shinku_global_target@root = {
			kill_leader = {
				show_notification = no
			}
		}
		roz_leader_type_switch_create_leader_initiate_effect = {
			leader = shinku
			leader_sc = zhenhong
			leader_type = official
			symbolic_trait_1 = leader_trait_roz_shinku_main
			symbolic_trait_2 = leader_trait_roz
			symbolic_trait_3 = leader_trait_roz
		}
		
		roz_leader_initialize_after_create_effect = {
			leader = shinku
			leader_sc = zhenhong
			leader_type = official
		}
	}
}



####封装####
roz_leader_type_switch_clone_initiate_effect = {	#在clone leader内使用
	unassign_leader = this
	freeze_leader_age = yes
	set_leader_flag = roz_$leader$_flag
	set_owner = event_target:roz_$country$@root
	roz_leader_name_set_effect = {
		who_jp = $leader$
		who_sc = $leader_sc$
	}
}

# roz_leader_type_switch_kill_initiate_effect = {	#remove将被切换职位的领袖
# 	every_owned_leader = {
# 		limit = {
# 			OR = {
# 				has_trait = $symbolic_trait_1$
# 				has_trait = $symbolic_trait_2$ #select to use
# 				has_leader_flag = roz_$leader$_flag
# 			}
# 			is_variable_set = roz_shinku_affection
# 		}
# 		unassign_leader = this
# 		kill_leader = {
# 			show_notification = no
# 		}
# 	}
# }	

roz_leader_type_switch_create_leader_initiate_effect = {	#生成领袖
	if = {	#从缓存国家复制备份
		limit = { 
			OR = {
				event_target:roz_$leader$_country@root = {
					any_owned_leader = {
						leader_class = $leader_type$
						has_trait = $symbolic_trait_1$
					}
				}
				exists = event_target:roz_$leader$_$leader_type$_inactive_temp@root
			}
		}
		roz_leader_type_switch_clone_from_cache_country_effect = {
			leader = $leader$
			leader_sc = $leader_sc$
			leader_type = $leader_type$
		}
	}
	else_if = {	#没有备份就新建
		limit = { #或许以后用得到
		}
		create_leader = {
			class = $leader_type$
			name = "NAME_$leader$"
			skill = 1
			gender = female
			species = owner_main_species
			immortal = yes
			event_leader = yes
			set_age = 17
			traits = { }
			skip_background_generation = yes
			custom_catch_phrase = $leader$_$leader_type$_catch_phrase
			custom_description = $leader$_backstory
			effect = {
				add_skill_without_trait_selection = 1
				remove_all_traits = yes
				set_variable = {
					which = roz_shinku_affection
					value = owner.roz_leader_aft_$leader$
				}
			}
		}
		last_created_leader = {
			set_leader_flag = roz_$leader$_flag
			freeze_leader_age = yes
			switch = {
				trigger = leader_class
				scientist = {
					random_list = {
						1 = { add_trait = { trait = leader_trait_surveyor } }
						1 = { add_trait = { trait = leader_trait_midas_touch } }
						1 = { add_trait = { trait = leader_trait_knowledge_for_the_masses } }
						1 = { add_trait = { trait = leader_trait_great_researcher } }
						1 = { add_trait = { trait = leader_trait_truth_seeker } }
						1 = { add_trait = { trait = leader_trait_brilliant_shipwright } }
						1 = { add_trait = { trait = leader_trait_frontier_adventurer } }
						1 = { add_trait = { trait = leader_trait_xeno_cataloger } }
						2 = { add_trait = { trait = leader_trait_knowledge_for_the_masses } }
					}
				}
				commander = {
					random_list = {
						1 = { add_trait = { trait = leader_trait_armorer } }
						1 = { add_trait = { trait = leader_trait_military_overseer } }
						1 = { add_trait = { trait = leader_trait_master_gunner } }
						1 = { add_trait = { trait = leader_trait_destiny_engineer } }
						1 = { add_trait = { trait = leader_trait_guerilla_tactics } }
						1 = { add_trait = { trait = leader_trait_survivalist } }
						1 = { add_trait = { trait = leader_trait_maven_of_war } }
						2 = { add_trait = { trait = leader_trait_peacekeeper } }
					}
					random_list = {
						1 = { add_trait = { trait = leader_trait_taskmaster } }
						1 = { add_trait = { trait = leader_trait_fortress_cracker } }
						1 = { add_trait = { trait = leader_trait_chainbreaker } }
						1 = { add_trait = { trait = leader_trait_honored_warmaster } }
						1 = { add_trait = { trait = leader_trait_academia_recruiter } }
						1 = { add_trait = { trait = leader_trait_supreme_warrior } }
						1 = { add_trait = { trait = leader_trait_spymaster } }
						1 = { add_trait = { trait = leader_trait_totalitarian } }
						1 = { add_trait = { trait = leader_trait_bellicose } }
					}
				}
				official = {
					random_list = {
						1 = { add_trait = { trait = leader_trait_efficient } }
						1 = { add_trait = { trait = leader_trait_arbiter } }
						2 = { add_trait = { trait = leader_trait_utopian_idealist } }
						1 = { add_trait = { trait = leader_trait_mediator } }
						1 = { add_trait = { trait = leader_trait_shroud_preacher } }
						1 = { add_trait = { trait = leader_trait_master_diplomat } }
						1 = { add_trait = { trait = leader_trait_galvanizer } }
					}
				}
			}
			add_trait = { trait = $symbolic_trait_1$ }
			add_trait = { trait = $symbolic_trait_2$ }
			add_trait = { trait = $symbolic_trait_3$ }
		}
	}
}

roz_leader_type_switch_clone_from_cache_country_effect = {
	clone_leader = {	#从临时国家复制领袖备份到玩家国家，变量和flag的设置在下一个封装
		target = event_target:roz_$leader$_$leader_type$_inactive_temp@root
		custom_catch_phrase = $leader$_$leader_type$_catch_phrase
		custom_description = $leader$_backstory
		effect = {
			freeze_leader_age = yes
			roz_leader_name_set_effect = {
				who_jp = $leader$
				who_sc = $leader_sc$
			}
			set_leader_flag = roz_$leader$_flag
			set_owner = event_target:roz_$leader$_owner@root
			#东方繁星录兼容
			if = {
				limit = { this = { spth_check_gensokyo_auth = yes } }
				set_leader_flag = own_th_leader_trait
			}
		}
	}
}

###必须已经新创建领袖（非克隆）才能用, 需要先清除领袖外貌flag（country）再设置，然后再执行该封装
roz_leader_initialize_after_create_effect = {
	last_created_leader = {
		#set_leader_flag = roz_$leader$_flag
		set_leader_flag = legendary_leader
		set_leader_flag = immune_to_negative_traits
		set_leader_flag = leader_death_events_blocked
		#set_leader_flag = has_gained_level_trait
		#freeze_leader_age = yes
		roz_leader_name_set_effect = {
			who_jp = $leader$
			who_sc = $leader_sc$
		}
		save_global_event_target_as = roz_leader_$leader$_global_target@root
		set_variable = {
			which = roz_$leader$_affection
			value = root.roz_leader_aft_$leader$
		}
		set_variable = {
			which = leader_pending_negative_traits_unmodified
			value = event_target:roz_$leader$_$leader_type$_inactive_temp@root.leader_pending_negative_traits_unmodified
		}
		if = {
			limit = { check_variable = { which = roz_$leader$_affection value >= 90 } }
			add_trait = { trait = leader_trait_roz_a_love }
		}
		else_if = {
			limit = { check_variable = { which = roz_$leader$_affection value >= 60 } }
			add_trait = { trait = leader_trait_roz_a_like }
		}
		else_if = {
			limit = { check_variable = { which = roz_$leader$_affection value >= 30 } }
			add_trait = { trait = leader_trait_roz_a_friendly }
		}
		else_if = {
			limit = { check_variable = { which = roz_$leader$_affection value < 30 } }
			add_trait = { trait = leader_trait_roz_a_strangeness }
		}
	}
	roz_leader_change_skin_reset_effect = {
		leader = $leader$
		skin_index1 = 1
		skin_index2 = 2
		skin_index3 = 3
		skin_index4 = 4
		skin_index5 = 5
		skin_index6 = 6
		skin_index7 = 7
		skin_index8 = 8
		skin_index9 = 9
		skin_index10 = 10
		skin_index11 = 11
		skin_index12 = 12
		skin_index13 = 13
		skin_index14 = 14
		skin_index15 = 15
		skin_index16 = 20
		skin_index17 = 21
		skin_index18 = 22
		skin_index19 = sp1
		skin_index20 = sp2
		skin_index20 = 61
		skin_index22 = default
		skin_index23 = 20th
	}
	
}

###真红月检备份（或者说是更新备份）
roz_shinku_leader_backup = {
    if = {	#指挥官备份
        limit = {
            event_target:roz_leader_shinku_global_target@root = {
                leader_class = commander
            }
        }
        event_target:roz_shinku_commander_inactive_temp@root = { #去掉全局国家的缓存真红
            kill_leader = {
                show_notification = no
            }
        }
        clear_global_event_target = roz_shinku_commander_inactive_temp@root
        clone_leader = { #替换当前的真红（指挥官）到全局国家
            target = event_target:roz_leader_shinku_global_target@root
            effect = {
                save_global_event_target_as = roz_shinku_commander_inactive_temp@root
				roz_leader_pending_negative_traits_unmodified_count = yes
                roz_leader_type_switch_clone_initiate_effect = {
					leader = shinku
					leader_sc = zhenhong
					country = shinku_global_country
				}
				#东方繁星录兼容
				if = {
					limit = { this = { spth_check_gensokyo_auth = yes } }
					set_leader_flag = own_th_leader_trait
				}
            }
        }
    }
	if = {	#科学家备份
        limit = {
            event_target:roz_leader_shinku_global_target@root = {
                leader_class = scientist
            }
        }
        event_target:roz_shinku_scientist_inactive_temp@root = { #去掉全局国家的缓存真红
            kill_leader = {
                show_notification = no
            }
        }
        clear_global_event_target = roz_shinku_scientist_inactive_temp@root
        clone_leader = { #替换当前的真红（指挥官）到全局国家
            target = event_target:roz_leader_shinku_global_target@root
            effect = {
                save_global_event_target_as = roz_shinku_scientist_inactive_temp@root
				roz_leader_pending_negative_traits_unmodified_count = yes
                roz_leader_type_switch_clone_initiate_effect = {
					leader = shinku
					leader_sc = zhenhong
					country = shinku_global_country
				}
				#东方繁星录兼容
				if = {
					limit = { this = { spth_check_gensokyo_auth = yes } }
					set_leader_flag = own_th_leader_trait
				}
            }
        }
    }
	if = {	#行政官备份
        limit = {
            event_target:roz_leader_shinku_global_target@root = {
                leader_class = official
            }
        }
        event_target:roz_shinku_official_inactive_temp@root = { #去掉全局国家的缓存真红
            kill_leader = {
                show_notification = no
            }
        }
        clear_global_event_target = roz_shinku_official_inactive_temp@root
        clone_leader = { #替换当前的真红（指挥官）到全局国家
            target = event_target:roz_leader_shinku_global_target@root
            effect = {
                save_global_event_target_as = roz_shinku_official_inactive_temp@root
				roz_leader_pending_negative_traits_unmodified_count = yes
                roz_leader_type_switch_clone_initiate_effect = {
					leader = shinku
					leader_sc = zhenhong
					country = shinku_global_country
				}
				#东方繁星录兼容
				if = {
					limit = { this = { spth_check_gensokyo_auth = yes } }
					set_leader_flag = own_th_leader_trait
				}
            }
        }
    }
}



roz_leader_change_skin_reset_effect = {	#scope = country
    switch = {
        trigger = has_country_flag
        roz_$leader$_portrait_change_roz_$leader$_$skin_index1$ = {
            roz_leader_change_skin_flag_locate_effect = {
                who = $leader$
                portrait = roz_$leader$
                flag = roz_$leader$_portrait_change
                portrait_key = roz_$leader$_$skin_index1$
                leader_flag = roz_$leader$_flag
            }
        }    
		roz_$leader$_portrait_change_roz_$leader$_$skin_index2$ = {
            roz_leader_change_skin_flag_locate_effect = {
                who = $leader$
                portrait = roz_$leader$
                flag = roz_$leader$_portrait_change
                portrait_key = roz_$leader$_$skin_index2$
                leader_flag = roz_$leader$_flag
            }
        }
		roz_$leader$_portrait_change_roz_$leader$_$skin_index3$ = {
            roz_leader_change_skin_flag_locate_effect = {
                who = $leader$
                portrait = roz_$leader$
                flag = roz_$leader$_portrait_change
                portrait_key = roz_$leader$_$skin_index3$
                leader_flag = roz_$leader$_flag
            }
        }
		roz_$leader$_portrait_change_roz_$leader$_$skin_index4$ = {
            roz_leader_change_skin_flag_locate_effect = {
                who = $leader$
                portrait = roz_$leader$
                flag = roz_$leader$_portrait_change
                portrait_key = roz_$leader$_$skin_index4$
                leader_flag = roz_$leader$_flag
            }
        }
		roz_$leader$_portrait_change_roz_$leader$_$skin_index5$ = {
            roz_leader_change_skin_flag_locate_effect = {
                who = $leader$
                portrait = roz_$leader$
                flag = roz_$leader$_portrait_change
                portrait_key = roz_$leader$_$skin_index5$
                leader_flag = roz_$leader$_flag
            }
        }
		roz_$leader$_portrait_change_roz_$leader$_$skin_index6$ = {
            roz_leader_change_skin_flag_locate_effect = {
                who = $leader$
                portrait = roz_$leader$
                flag = roz_$leader$_portrait_change
                portrait_key = roz_$leader$_$skin_index6$
                leader_flag = roz_$leader$_flag
            }
        }
		roz_$leader$_portrait_change_roz_$leader$_$skin_index7$ = {
            roz_leader_change_skin_flag_locate_effect = {
                who = $leader$
                portrait = roz_$leader$
                flag = roz_$leader$_portrait_change
                portrait_key = roz_$leader$_$skin_index7$
                leader_flag = roz_$leader$_flag
            }
        }
		roz_$leader$_portrait_change_roz_$leader$_$skin_index8$ = {
            roz_leader_change_skin_flag_locate_effect = {
                who = $leader$
                portrait = roz_$leader$
                flag = roz_$leader$_portrait_change
                portrait_key = roz_$leader$_$skin_index9$
                leader_flag = roz_$leader$_flag
            }
        }
		roz_$leader$_portrait_change_roz_$leader$_$skin_index9$ = {
            roz_leader_change_skin_flag_locate_effect = {
                who = $leader$
                portrait = roz_$leader$
                flag = roz_$leader$_portrait_change
                portrait_key = roz_$leader$_$skin_index9$
                leader_flag = roz_$leader$_flag
            }
        }
		roz_$leader$_portrait_change_roz_$leader$_$skin_index10$ = {
            roz_leader_change_skin_flag_locate_effect = {
                who = $leader$
                portrait = roz_$leader$
                flag = roz_$leader$_portrait_change
                portrait_key = roz_$leader$_$skin_index10$
                leader_flag = roz_$leader$_flag
            }
        }
		roz_$leader$_portrait_change_roz_$leader$_$skin_index11$ = {
            roz_leader_change_skin_flag_locate_effect = {
                who = $leader$
                portrait = roz_$leader$
                flag = roz_$leader$_portrait_change
                portrait_key = roz_$leader$_$skin_index11$
                leader_flag = roz_$leader$_flag
            }
        }    
		roz_$leader$_portrait_change_roz_$leader$_$skin_index12$ = {
            roz_leader_change_skin_flag_locate_effect = {
                who = $leader$
                portrait = roz_$leader$
                flag = roz_$leader$_portrait_change
                portrait_key = roz_$leader$_$skin_index12$
                leader_flag = roz_$leader$_flag
            }
        }
		roz_$leader$_portrait_change_roz_$leader$_$skin_index13$ = {
            roz_leader_change_skin_flag_locate_effect = {
                who = $leader$
                portrait = roz_$leader$
                flag = roz_$leader$_portrait_change
                portrait_key = roz_$leader$_$skin_index13$
                leader_flag = roz_$leader$_flag
            }
        }
		roz_$leader$_portrait_change_roz_$leader$_$skin_index14$ = {
            roz_leader_change_skin_flag_locate_effect = {
                who = $leader$
                portrait = roz_$leader$
                flag = roz_$leader$_portrait_change
                portrait_key = roz_$leader$_$skin_index14$
                leader_flag = roz_$leader$_flag
            }
        }
		roz_$leader$_portrait_change_roz_$leader$_$skin_index15$ = {
            roz_leader_change_skin_flag_locate_effect = {
                who = $leader$
                portrait = roz_$leader$
                flag = roz_$leader$_portrait_change
                portrait_key = roz_$leader$_$skin_index15$
                leader_flag = roz_$leader$_flag
            }
        }
		roz_$leader$_portrait_change_roz_$leader$_$skin_index16$ = {
            roz_leader_change_skin_flag_locate_effect = {
                who = $leader$
                portrait = roz_$leader$
                flag = roz_$leader$_portrait_change
                portrait_key = roz_$leader$_$skin_index16$
                leader_flag = roz_$leader$_flag
            }
        }
		roz_$leader$_portrait_change_roz_$leader$_$skin_index17$ = {
            roz_leader_change_skin_flag_locate_effect = {
                who = $leader$
                portrait = roz_$leader$
                flag = roz_$leader$_portrait_change
                portrait_key = roz_$leader$_$skin_index17$
                leader_flag = roz_$leader$_flag
            }
        }
		roz_$leader$_portrait_change_roz_$leader$_$skin_index18$ = {
            roz_leader_change_skin_flag_locate_effect = {
                who = $leader$
                portrait = roz_$leader$
                flag = roz_$leader$_portrait_change
                portrait_key = roz_$leader$_$skin_index18$
                leader_flag = roz_$leader$_flag
            }
        }
		roz_$leader$_portrait_change_roz_$leader$_$skin_index19$ = {
            roz_leader_change_skin_flag_locate_effect = {
                who = $leader$
                portrait = roz_$leader$
                flag = roz_$leader$_portrait_change
                portrait_key = roz_$leader$_$skin_index19$
                leader_flag = roz_$leader$_flag
            }
        }
		roz_$leader$_portrait_change_roz_$leader$_$skin_index20$ = {
            roz_leader_change_skin_flag_locate_effect = {
                who = $leader$
                portrait = roz_$leader$
                flag = roz_$leader$_portrait_change
                portrait_key = roz_$leader$_$skin_index20$
                leader_flag = roz_$leader$_flag
            }
        }
		roz_$leader$_portrait_change_roz_$leader$_$skin_index21$ = {
            roz_leader_change_skin_flag_locate_effect = {
                who = $leader$
                portrait = roz_$leader$
                flag = roz_$leader$_portrait_change
                portrait_key = roz_$leader$_$skin_index21$
                leader_flag = roz_$leader$_flag
            }
        }
		roz_$leader$_portrait_change_roz_$leader$_$skin_index22$ = {
            roz_leader_change_skin_flag_locate_effect = {
                who = $leader$
                portrait = roz_$leader$
                flag = roz_$leader$_portrait_change
                portrait_key = roz_$leader$_$skin_index22$
                leader_flag = roz_$leader$_flag
            }
        }
		roz_$leader$_portrait_change_roz_$leader$_$skin_index23$ = {
            roz_leader_change_skin_flag_locate_effect = {
                who = $leader$
                portrait = roz_$leader$
                flag = roz_$leader$_portrait_change
                portrait_key = roz_$leader$_$skin_index23$
                leader_flag = roz_$leader$_flag
            }
        }
    }
}

roz_leader_change_skin_reset_shinku_effect = {
    switch = {
        trigger = has_country_flag
        roz_shinku_portrait_change_roz_shinku_20th = {
            roz_leader_change_skin_flag_locate_effect = {
                who = shinku
                portrait = roz_shinku
                flag = roz_shinku_portrait_change
                portrait_key = roz_shinku_20th
                leader_flag = roz_shinku_flag
            }
        }
        roz_shinku_portrait_change_roz_shinku_01 = {
            roz_leader_change_skin_flag_locate_effect = {
                who = shinku
                portrait = roz_shinku
                flag = roz_shinku_portrait_change
                portrait_key = roz_shinku_01
                leader_flag = roz_shinku_flag
            }
        }
    }
}

