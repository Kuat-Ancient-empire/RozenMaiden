roz_junn_country_create = {
	optimize_memory
	create_country = {
		name = "NAME_nfield_junn"
		type = ge_N_Field
		flag = {
			icon = {
				category = "nfield_junn"
				file = "flag_roz_junn.dds"
			}
			background = {
				category = "backgrounds"
				file = "inverted_v.dds"
			}
			colors = {
				"black"
				"black"
				"null"
				"null"
			}
		}
		effect = {
			save_global_event_target_as = roz_junn_global_country@root
			set_country_flag = roz_junn_country
		}
	}
	last_created_country = {
		establish_communications_no_message = root
	}
	event_target:roz_junn_global_country@root = {
		owner = {
		}
	}
}

roz_hinaichigo_country_create = {
	optimize_memory
	create_country = {
		name = "NAME_nfield_hinaichigo"
		type = ge_N_Field
		flag = {
			icon = {
				category = "nfield_hn_flags"
				file = "flag_roz_hn.dds"
			}
			background = {
				category = "backgrounds"
				file = "inverted_v.dds"
			}
			colors = {
				"pink"
				"pink_purple"
				"null"
				"null"
			}
		}
		effect = {
			save_global_event_target_as = roz_hinaichigo_global_country@root
			set_country_flag = roz_hinaichigo_country
		}
	}
	last_created_country = {
		establish_communications_no_message = root
	}
	set_country_flag = roz_hinaichigo_arrive
}

roz_madgod_country_initiate = {
	optimize_memory
	create_species = {
		name_list = roz_abyss_faction
		name = random
		class = random_non_machine
		portrait = random
		traits = {
			ideal_planet_class = pc_habitat
			trait = random_traits
		}
	}
	create_country = {
		name_list = roz_abyss_faction
		name = NAME_madgod_force_country
		type = roz_madgod_empire
		ignore_initial_colony_error = yes
		authority = auth_hive_mind
		civics = {
			civic = civic_ancient_memories_of_control
		}
		origin = origin_fallen_empire_hive
		species = last_created_species
		flag = {
			icon = {
				category = "roz_special"
				file = "roz_madgod.dds"
			}
			background = {
				category = "backgrounds"
				file = "vertical.dds"
			}
			colors = {
				"red"
				"red"
				"null"
				"null"
			}
		}
		ethos = {
			ethic = ethic_gestalt_consciousness
		}
		effect = { add_modifier = { modifier = roz_madgod_country_naval_country_buff } }
	}
	last_created_country = {
		set_country_flag = roz_madgod_force_country_flag
		set_graphical_culture = extra_dimensional_02
		save_global_event_target_as = roz_madgod_force_country@root
		set_hostile = root
		# every_country = {
		# 	limit = {
		# 		NOR = {
		# 			has_country_flag = roz_abyss_vass_country
		# 			is_hostile = prev
		# 		}
		# 	}
		# 	set_hostile = prev
		# }
		establish_communications_no_message = root
	}
}

roz_madgod_fleet_jtcl_create_direct = {
	#方案一
	optimize_memory
	create_fleet = {
		name = "NAME_roz_krks_zakko"
		settings = {
			spawn_debris = no
			is_boss = yes
		}
		effect = {
			set_owner = event_target:roz_madgod_force_country@root
			set_fleet_flag = roz_madgod_jtcl_fleet
			while = {
				count = 14
				create_ship = {
					name = "NAME_EDDY_ROZ"
					design = "NAME_Corrupted_Avatar"
					effect = {  }
				}
			}
			set_location = event_target:roz_outland_planet@root
			set_fleet_stance = aggressive
			set_aggro_range_measure_from = return_point
			set_aggro_range = 300
			add_modifier = {
				modifier = roz_krks_bf_stage1_HK_buff
				mult = 1
			}
		}
	}
}

roz_madgod_fleet_jtcl_create_decoy = {
	#方案二
	optimize_memory
	create_fleet = {
		name = "NAME_roz_krks_zakko"
		settings = {
			spawn_debris = no
			is_boss = yes
		}
		effect = {
			set_owner = event_target:roz_madgod_force_country@root
			set_fleet_flag = roz_madgod_jtcl_fleet
			while = {
				count = 9
				create_ship = {
					name = "NAME_EDDY_ROZ"
					design = "NAME_Corrupted_Avatar"
					effect = {  }
				}
			}
			set_location = event_target:roz_outland_planet@root
			set_fleet_stance = aggressive
			set_aggro_range_measure_from = return_point
			set_aggro_range = 300
			add_modifier = {
				modifier = roz_krks_bf_stage1_HK_buff
				mult = 0.75
			}
		}
	}
	# create_fleet = {
	# 	name = "NAME_roz_krks_zakko"
	# 	settings = {
	# 		spawn_debris = no
	# 		is_boss = yes
	# 	}
	# 	effect = {
	# 		set_owner = event_target:roz_suigintou_owner0
	# 		while = {
	# 			count = 3
	# 			create_ship = {
	# 				name = "NAME_Corrupted_Avatar"
	# 				design = "NAME_Corrupted_Avatar"
	# 				effect = {
	# 					#set_timed_ship_flag = { #如果你开了mist
	# 					#	flag = invincible
	# 					#	days = 3
	# 					#}
	# 				}
	# 			}
	# 			set_location = prevprev
	# 			set_fleet_stance = aggressive
	# 			set_aggro_range_measure_from = return_point
	# 			set_aggro_range = 300
	#
	# 			add_modifier = {
	# 				modifier = roz_krks_bf_stage1_HK_buff
	# 			}
	# 		}
	# 	}
	# }
}

###感染体入侵
###比较ai态度，计算数量
roz_unholy_invasion_dip_effect = {
	optimize_memory
	set_variable = { which = roz_unholy_invasion_dip_$opinion$_ai value = 0 }
	while = {
		limit = {
			any_playable_country = {
				opinion_level = {
					who = root
					level $sign$ $opinion_set$
				}
				NOR = {
					has_country_flag = roz_unholy_invasion_dip_$opinion$_ai_flag
					has_country_flag = roz_abyss_vass_country
				}
			}
		}
		random_playable_country = {
			limit = {
				NOR = {
					has_country_flag = roz_unholy_invasion_dip_$opinion$_ai_flag
					has_country_flag = roz_abyss_vass_country
				}
			}
			set_country_flag = roz_unholy_invasion_dip_$opinion$_ai_flag
		}
		change_variable = {
			which = roz_unholy_invasion_dip_$opinion$_ai
			value = 1
		}
	}
}

# roz_unholy_invasion_dip_aggressive_effect = {
# 	while = {
# 		#支持者
# 		limit = {
# 			any_playable_country = {
# 				opinion_level = {
# 					who = root
# 					level >= good
# 				}
# 				NOT = {
# 					has_country_flag = roz_unholy_invasion_dip_aggressive_ai_flag
# 				}
# 			}
# 		}
# 		random_playable_country = {
# 			limit = {
# 				NOT = {
# 					has_country_flag = roz_unholy_invasion_dip_aggressive_ai_flag
# 				}
# 			}
# 			set_country_flag = roz_unholy_invasion_dip_aggressive_ai_flag
# 		}
# 		change_variable = {
# 			which = roz_unholy_invasion_dip_aggressive_ai
# 			value = 1
# 		}
# 	}
# }

# roz_unholy_invasion_dip_negative_effect = {
# 	while = {
# 		#反对者
# 		limit = {
# 			any_playable_country = {
# 				opinion_level = {
# 					who = root
# 					level <= poor
# 				}
# 				NOT = {
# 					has_country_flag = roz_unholy_invasion_dip_negative_ai_flag
# 				}
# 			}
# 		}
# 		random_playable_country = {
# 			limit = {
# 				NOT = {
# 					has_country_flag = roz_unholy_invasion_dip_negative_ai_flag
# 				}
# 			}
# 			set_country_flag = roz_unholy_invasion_dip_negative_ai_flag
# 		}
# 		change_variable = {
# 			which = roz_unholy_invasion_dip_negative_ai
# 			value = 1
# 		}
# 	}
# }

# roz_unholy_invasion_dip_neutral_effect = {
# 	while = {
# 		#中立者
# 		limit = {
# 			any_playable_country = {
# 				opinion_level = {
# 					who = root
# 					level = neutral
# 				}
# 				NOT = {
# 					has_country_flag = roz_unholy_invasion_dip_neutral_ai_flag
# 				}
# 			}
# 		}
# 		random_playable_country = {
# 			limit = {
# 				NOT = {
# 					has_country_flag = roz_unholy_invasion_dip_neutral_ai_flag
# 				}
# 			}
# 			set_country_flag = roz_unholy_invasion_dip_neutral_ai_flag
# 		}
# 		change_variable = {
# 			which = roz_unholy_invasion_dip_neutral_ai
# 			value = 1
# 		}
# 	}
# }

####封装####
roz_leader_type_switch_clone_initiate_effect = {	#在clone leader内使用
	unassign_leader = this
	freeze_leader_age = yes
	set_leader_flag = roz_$leader$_flag
	set_owner = event_target:roz_$country$@root
	roz_leader_name_set_effect = {
		who_jp = $leader$
		who_sc = $leader_sc$
	}
}

roz_leader_type_switch_create_leader_initiate_effect = {	#生成领袖
	if = {	#从缓存国家复制备份
		limit = {
			OR = {
				event_target:roz_$leader$_country@root = {
					any_owned_leader = {
						leader_class = $leader_type$
						has_trait = $symbolic_trait_1$
					}
				}
				exists = event_target:roz_$leader$_$leader_type$_inactive_temp@root
			}
		}
		roz_leader_type_switch_clone_from_cache_country_effect = {
			leader = $leader$
			leader_sc = $leader_sc$
			leader_type = $leader_type$
		}
	}
	else_if = {	#没有备份就新建
		limit = { #或许以后用得到
		}
		create_leader = {
			class = $leader_type$
			name = "NAME_$leader$"
			skill = 1
			gender = female
			species = owner_main_species
			immortal = yes
			event_leader = yes
			set_age = 17
			traits = { }
			skip_background_generation = yes
			custom_catch_phrase = $leader$_$leader_type$_catch_phrase
			custom_description = $leader$_backstory
			effect = {
				add_skill_without_trait_selection = 1
				remove_all_traits = yes
				set_variable = {
					which = roz_shinku_affection
					value = owner.roz_leader_aft_$leader$
				}
			}
		}
		last_created_leader = {
			set_leader_flag = roz_$leader$_flag
			freeze_leader_age = yes
			switch = {
				trigger = leader_class
				scientist = {
					random_list = {
						1 = { add_trait = { trait = leader_trait_surveyor } }
						1 = { add_trait = { trait = leader_trait_midas_touch } }
						1 = { add_trait = { trait = leader_trait_knowledge_for_the_masses } }
						1 = { add_trait = { trait = leader_trait_great_researcher } }
						1 = { add_trait = { trait = leader_trait_truth_seeker } }
						1 = { add_trait = { trait = leader_trait_brilliant_shipwright } }
						1 = { add_trait = { trait = leader_trait_frontier_adventurer } }
						1 = { add_trait = { trait = leader_trait_xeno_cataloger } }
						2 = { add_trait = { trait = leader_trait_knowledge_for_the_masses } }
					}
				}
				commander = {
					random_list = {
						1 = { add_trait = { trait = leader_trait_armorer } }
						1 = { add_trait = { trait = leader_trait_military_overseer } }
						1 = { add_trait = { trait = leader_trait_master_gunner } }
						1 = { add_trait = { trait = leader_trait_destiny_engineer } }
						1 = { add_trait = { trait = leader_trait_guerilla_tactics } }
						1 = { add_trait = { trait = leader_trait_survivalist } }
						1 = { add_trait = { trait = leader_trait_maven_of_war } }
						2 = { add_trait = { trait = leader_trait_peacekeeper } }
					}
					random_list = {
						1 = { add_trait = { trait = leader_trait_taskmaster } }
						1 = { add_trait = { trait = leader_trait_fortress_cracker } }
						1 = { add_trait = { trait = leader_trait_chainbreaker } }
						1 = { add_trait = { trait = leader_trait_honored_warmaster } }
						1 = { add_trait = { trait = leader_trait_academia_recruiter } }
						1 = { add_trait = { trait = leader_trait_supreme_warrior } }
						1 = { add_trait = { trait = leader_trait_spymaster } }
						1 = { add_trait = { trait = leader_trait_totalitarian } }
						1 = { add_trait = { trait = leader_trait_bellicose } }
					}
				}
				official = {
					random_list = {
						1 = { add_trait = { trait = leader_trait_efficient } }
						1 = { add_trait = { trait = leader_trait_arbiter } }
						2 = { add_trait = { trait = leader_trait_utopian_idealist } }
						1 = { add_trait = { trait = leader_trait_mediator } }
						1 = { add_trait = { trait = leader_trait_shroud_preacher } }
						1 = { add_trait = { trait = leader_trait_master_diplomat } }
						1 = { add_trait = { trait = leader_trait_galvanizer } }
					}
				}
			}
			add_trait = { trait = $symbolic_trait_1$ }
			add_trait = { trait = $symbolic_trait_2$ }
			add_trait = { trait = $symbolic_trait_3$ }
		}
	}
}

roz_leader_type_switch_clone_from_cache_country_effect = {
	clone_leader = {	#从临时国家复制领袖备份到玩家国家，变量和flag的设置在下一个封装
		target = event_target:roz_$leader$_$leader_type$_inactive_temp@root
		custom_catch_phrase = $leader$_$leader_type$_catch_phrase
		custom_description = $leader$_backstory
		effect = {
			freeze_leader_age = yes
			roz_leader_name_set_effect = {
				who_jp = $leader$
				who_sc = $leader_sc$
			}
			set_leader_flag = roz_$leader$_flag
			set_owner = event_target:roz_$leader$_owner@root
			#东方繁星录兼容
			if = {
				limit = { this = { spth_check_gensokyo_auth = yes } }
				set_leader_flag = own_th_leader_trait
			}
		}
	}
}

###必须已经新创建领袖（非克隆）才能用, 需要先清除领袖外貌flag（country）再设置，然后再执行该封装
###并非必须，并非需要，并非然后（
roz_leader_initialize_after_create_effect = {
	last_created_leader = {
		#set_leader_flag = roz_$leader$_flag
		set_leader_flag = legendary_leader
		set_leader_flag = immune_to_negative_traits
		set_leader_flag = leader_death_events_blocked
		#set_leader_flag = has_gained_level_trait
		#freeze_leader_age = yes
		roz_leader_name_set_effect = {
			who_jp = $leader$
			who_sc = $leader_sc$
		}
		save_global_event_target_as = roz_leader_$leader$_global_target@root
		set_variable = {
			which = roz_$leader$_affection
			value = root.roz_leader_aft_$leader$
		}
		set_variable = {
			which = leader_pending_negative_traits_unmodified
			value = event_target:roz_$leader$_$leader_type$_inactive_temp@root.leader_pending_negative_traits_unmodified
		}
		if = {
			limit = { check_variable = { which = roz_$leader$_affection value >= 90 } }
			add_trait = { trait = leader_trait_roz_a_love }
		}
		else_if = {
			limit = { check_variable = { which = roz_$leader$_affection value >= 60 } }
			add_trait = { trait = leader_trait_roz_a_like }
		}
		else_if = {
			limit = { check_variable = { which = roz_$leader$_affection value >= 30 } }
			add_trait = { trait = leader_trait_roz_a_friendly }
		}
		else_if = {
			limit = { check_variable = { which = roz_$leader$_affection value < 30 } }
			add_trait = { trait = leader_trait_roz_a_strangeness }
		}
	}
	roz_leader_change_skin_reset_effect = {
		leader = $leader$
		skin_index1 = 1
		skin_index2 = 2
		skin_index3 = 3
		skin_index4 = 4
		skin_index5 = 5
		skin_index6 = 6
		skin_index7 = 7
		skin_index8 = 8
		skin_index9 = 9
		skin_index10 = 10
		skin_index11 = 11
		skin_index12 = 12
		skin_index13 = 13
		skin_index14 = 14
		skin_index15 = 15
		skin_index16 = 20
		skin_index17 = 21
		skin_index18 = 22
		skin_index19 = sp1
		skin_index20 = sp2
		skin_index20 = 61
		skin_index21 = none
		skin_index22 = default
		skin_index23 = 20th
	}

}

#真红初始化
roz_shinku_leader_initiate = {
	optimize_memory
	create_leader = {
		class = commander
		name = "NAME_shinku"
		skill = 1
		gender = female
		species = owner_main_species
		immortal = yes
		event_leader = yes
		set_age = 17
		traits = {  }
		#randomize_traits = no
		hide_age = yes
		skip_background_generation = yes
		custom_catch_phrase = shinku_gov_catch_phrase
		custom_description = shinku_backstory
		effect = {
			add_skill_without_trait_selection = 2
			remove_all_traits = yes
			roz_leader_name_set_effect = {
				who_jp = shinku
				who_sc = zhenhong
			}
			change_leader_portrait = roz_shinku_20th
		}
	}
	last_created_leader = {
		save_global_event_target_as = roz_leader_shinku_global_target@root
		unassign_leader = this
		set_variable = {
			##好感状态初始化
			which = roz_shinku_affection
			value = 5
		}
		add_trait = { trait = leader_trait_roz_shinku_main }
		random_list = {
			1 = { add_trait = { trait = leader_trait_armorer } }
			1 = { add_trait = { trait = leader_trait_military_overseer } }
			1 = { add_trait = { trait = leader_trait_master_gunner } }
			1 = { add_trait = { trait = leader_trait_destiny_engineer } }
			2 = { add_trait = { trait = leader_trait_guerilla_tactics } }
			1 = { add_trait = { trait = leader_trait_survivalist } }
			1 = { add_trait = { trait = leader_trait_maven_of_war } }
			1 = { add_trait = { trait = leader_trait_peacekeeper } }
		}
		random_list = {
			1 = { add_trait = { trait = leader_trait_taskmaster } }
			1 = { add_trait = { trait = leader_trait_fortress_cracker } }
			2 = { add_trait = { trait = leader_trait_chainbreaker } }
			1 = { add_trait = { trait = leader_trait_chainbreaker } }
			1 = { add_trait = { trait = leader_trait_honored_warmaster } }
			1 = { add_trait = { trait = leader_trait_academia_recruiter } }
			1 = { add_trait = { trait = leader_trait_supreme_warrior } }
			1 = { add_trait = { trait = leader_trait_spymaster } }
			1 = { add_trait = { trait = leader_trait_totalitarian } }
			1 = { add_trait = { trait = leader_trait_bellicose } }
		}
		freeze_leader_age = yes
		set_leader_flag = roz_shinku_flag
		set_leader_flag = legendary_leader
		set_leader_flag = immune_to_negative_traits
	}
	roz_leader_change_skin_set_flag_effect = {
		who = shinku
		portrait = roz_shinku
		flag = roz_shinku_portrait_change
		leader_flag = roz_shinku_flag
		portrait_key = roz_shinku_20th
	}
	clone_leader = {
		target = event_target:roz_leader_shinku_global_target@root
		effect = {
			save_global_event_target_as = roz_shinku_commander_inactive_temp@root
			#set_leader_flag = roz_shinku_flag
			set_name = NAME_shinku
			unassign_leader = this
			set_owner = event_target:roz_shinku_global_country@root
		}
	}
	set_timed_country_flag = { flag = roz_shinku_diplomatic_initialize_flag days = 31}
}
###真红-切换科学家职位
roz_shinku_leader_type_switch_scientist = {
	optimize_memory
	set_country_flag = roz_shinku_scientist_active
	#若当前真红职位为指挥官
	if = {
		limit = {
			event_target:roz_leader_shinku_global_target@root = {
				leader_class = commander
			}
		}
		remove_country_flag = roz_shinku_commander_active
		#缓存国家目标领袖更新替换
		event_target:roz_shinku_commander_inactive_temp@root = { 
		kill_leader = {
				show_notification = no
			}
		}
		clear_global_event_target = roz_shinku_commander_inactive_temp@root
		clone_leader = {
			#event_target:roz_shinku_global_country是真红的缓存国家
			#target = event_target:roz_leader_shinku_global_target@root #这个global target是玩家的真红
			##clone leader的effect有时不会继承领袖的leader flag和variable（变量完全不能继承），自定义背景也没有，最好补上
			target = event_target:roz_leader_shinku_global_target@root   
			effect = {
				save_global_event_target_as = roz_shinku_commander_inactive_temp@root
				roz_leader_pending_negative_traits_unmodified_count = yes
				roz_leader_type_switch_clone_initiate_effect = {
					leader = shinku
					leader_sc = zhenhong
					country = shinku_global_country
				}
				#东方繁星录兼容
				if = {
					limit = { this = { spth_check_gensokyo_auth = yes } }
					set_leader_flag = own_th_leader_trait
				}
			}
		}
		#移除玩家的指挥官真红
		event_target:roz_leader_shinku_global_target@root = {
			kill_leader = {
				show_notification = no
			}
		}
		#创建或从缓存国家复制科学家真红
		roz_leader_type_switch_create_leader_initiate_effect = {
			leader = shinku
			leader_sc = zhenhong
			leader_type = scientist
			symbolic_trait_1 = leader_trait_roz_shinku_main
			symbolic_trait_2 = leader_trait_roz
			symbolic_trait_3 = leader_trait_roz
		}
		
		roz_leader_initialize_after_create_effect = {
			leader = shinku
			leader_sc = zhenhong
			leader_type = scientist
		}
	}

	#若当前真红职位为行政官
	if = {
		limit = {
			event_target:roz_leader_shinku_global_target@root = {
				leader_class = official
			}
		}
		remove_country_flag = roz_shinku_official_active
		#缓存国家目标领袖更新替换, 先kill了再说
		event_target:roz_shinku_official_inactive_temp@root = { #令临时存储国家的舰队司令真红消失
		kill_leader = {
				show_notification = no
			}
		}
		clear_global_event_target = roz_shinku_official_inactive_temp@root
		clone_leader = {
			#替换，event_target:roz_shinku_global_country是真红的缓存国家
			#target = event_target:roz_leader_shinku_global_target@root #这个global target是玩家的真红
			target = event_target:roz_leader_shinku_global_target@root   #刚刚存的target
			effect = {
				save_global_event_target_as = roz_shinku_official_inactive_temp@root
				roz_leader_pending_negative_traits_unmodified_count = yes
				roz_leader_type_switch_clone_initiate_effect = {
					leader = shinku
					leader_sc = zhenhong
					country = shinku_global_country
				}
				#东方繁星录兼容
				if = {
					limit = { this = { spth_check_gensokyo_auth = yes } }
					set_leader_flag = own_th_leader_trait
				}
			}
		}
		#移除玩家的指挥官真红
		event_target:roz_leader_shinku_global_target@root = {
			kill_leader = {
				show_notification = no
			}
		}
		#创建或从缓存国家复制科学家真红
		roz_leader_type_switch_create_leader_initiate_effect = {
			leader = shinku
			leader_sc = zhenhong
			leader_type = scientist
			symbolic_trait_1 = leader_trait_roz_shinku_main
			symbolic_trait_2 = leader_trait_roz
			symbolic_trait_3 = leader_trait_roz
		}
		
		roz_leader_initialize_after_create_effect = {
			leader = shinku
			leader_sc = zhenhong
			leader_type = scientist
		}
	}
}
###真红-切换指挥官职位
roz_shinku_leader_type_switch_commander = {
	optimize_memory
	set_country_flag = roz_shinku_commander_active
	#若当前真红职位为科学家
	if = {
		limit = {
			event_target:roz_leader_shinku_global_target@root = {
				leader_class = scientist
			}
		}
		remove_country_flag = roz_shinku_scientist_active
		#缓存国家目标领袖更新替换
		event_target:roz_shinku_scientist_inactive_temp@root = { 
		kill_leader = {
				show_notification = no
			}
		}
		clear_global_event_target = roz_shinku_scientist_inactive_temp@root
		clone_leader = {
			#event_target:roz_shinku_global_country是真红的缓存国家
			#target = event_target:roz_leader_shinku_global_target@root #这个global target是玩家的真红
			target = event_target:roz_leader_shinku_global_target@root   
			effect = {
				save_global_event_target_as = roz_shinku_scientist_inactive_temp@root
				roz_leader_pending_negative_traits_unmodified_count = yes
				roz_leader_type_switch_clone_initiate_effect = {
					leader = shinku
					leader_sc = zhenhong
					country = shinku_global_country
				}
				#东方繁星录兼容
				if = {
					limit = { this = { spth_check_gensokyo_auth = yes } }
					set_leader_flag = own_th_leader_trait
				}
			}
		}
		#移除玩家的科学家真红
		event_target:roz_leader_shinku_global_target@root = {
			kill_leader = {
				show_notification = no
			}
		}
		#创建或从缓存国家复制指挥官真红
		roz_leader_type_switch_create_leader_initiate_effect = {
			leader = shinku
			leader_sc = zhenhong
			leader_type = commander
			symbolic_trait_1 = leader_trait_roz_shinku_main
			symbolic_trait_2 = leader_trait_roz
			symbolic_trait_3 = leader_trait_roz
		}
		
		roz_leader_initialize_after_create_effect = {
			leader = shinku
			leader_sc = zhenhong
			leader_type = commander
		}

		last_created_leader = {
			
		}
	}

	#若当前真红职位为行政官
	if = {
		limit = {
			event_target:roz_leader_shinku_global_target@root = {
				leader_class = official
			}
		}
		remove_country_flag = roz_shinku_official_active
		#缓存国家目标领袖更新替换, 先kill了再说
		event_target:roz_shinku_official_inactive_temp@root = { #令临时存储国家的舰队司令真红消失
		kill_leader = {
				show_notification = no
			}
		}
		clear_global_event_target = roz_shinku_official_inactive_temp@root
		clone_leader = {
			#替换，event_target:roz_shinku_global_country是真红的缓存国家
			#target = event_target:roz_leader_shinku_global_target@root #这个global target是玩家的真红
			target = event_target:roz_leader_shinku_global_target@root
			effect = {
				save_global_event_target_as = roz_shinku_official_inactive_temp@root
				roz_leader_pending_negative_traits_unmodified_count = yes
				roz_leader_type_switch_clone_initiate_effect = {
					leader = shinku
					leader_sc = zhenhong
					country = shinku_global_country
				}
				#东方繁星录兼容
				if = {
					limit = { this = { spth_check_gensokyo_auth = yes } }
					set_leader_flag = own_th_leader_trait
				}
			}
		}
		#移除玩家的指挥官真红
		event_target:roz_leader_shinku_global_target@root = {
			kill_leader = {
				show_notification = no
			}
		}
		#创建或从缓存国家复制指挥官真红
		roz_leader_type_switch_create_leader_initiate_effect = {
			leader = shinku
			leader_sc = zhenhong
			leader_type = commander
			symbolic_trait_1 = leader_trait_roz_shinku_main
			symbolic_trait_2 = leader_trait_roz
			symbolic_trait_3 = leader_trait_roz
		}
		
		roz_leader_initialize_after_create_effect = {
			leader = shinku
			leader_sc = zhenhong
			leader_type = commander
		}

		last_created_leader = {
			
		}
	}
}
###真红-切换行政官职位
roz_shinku_leader_type_switch_official = {
	optimize_memory
	set_country_flag = roz_shinku_official_active
	#若当前真红职位为科学家
	if = {
		limit = {
			event_target:roz_leader_shinku_global_target@root = {
				leader_class = scientist
			}
		}
		remove_country_flag = roz_shinku_scientist_active
		#缓存国家目标领袖更新替换
		event_target:roz_shinku_scientist_inactive_temp@root = { 
		kill_leader = {
				show_notification = no
			}
		}
		clear_global_event_target = roz_shinku_scientist_inactive_temp@root
		clone_leader = {
			#event_target:roz_shinku_global_country是真红的缓存国家
			#target = event_target:roz_leader_shinku_global_target@root #这个global target是玩家的真红
			target = event_target:roz_leader_shinku_global_target@root   
			effect = {
				save_global_event_target_as = roz_shinku_scientist_inactive_temp@root
				roz_leader_pending_negative_traits_unmodified_count = yes
				roz_leader_type_switch_clone_initiate_effect = {
					leader = shinku
					leader_sc = zhenhong
					country = shinku_global_country
				}
				#东方繁星录兼容
				if = {
					limit = { this = { spth_check_gensokyo_auth = yes } }
					set_leader_flag = own_th_leader_trait
				}
			}
		}
		#移除玩家的科学家真红
		event_target:roz_leader_shinku_global_target@root = {
			kill_leader = {
				show_notification = no
			}
		}
		#创建或从缓存国家复制行政官真红
		roz_leader_type_switch_create_leader_initiate_effect = {
			leader = shinku
			leader_sc = zhenhong
			leader_type = official
			symbolic_trait_1 = leader_trait_roz_shinku_main
			symbolic_trait_2 = leader_trait_roz
			symbolic_trait_3 = leader_trait_roz
		}
		
		roz_leader_initialize_after_create_effect = {
			leader = shinku
			leader_sc = zhenhong
			leader_type = official
		}
	}

	#若当前真红职位为指挥官
	if = {
		limit = {
			event_target:roz_leader_shinku_global_target@root = {
				leader_class = commander
			}
		}
		remove_country_flag = roz_shinku_commander_active
		#缓存国家目标领袖更新替换, 先kill了再说
		event_target:roz_shinku_commander_inactive_temp@root = { #令临时存储国家的舰队司令真红消失
		kill_leader = {
				show_notification = no
			}
		}
		clear_global_event_target = roz_shinku_commander_inactive_temp@root
		clone_leader = {
			#替换，event_target:roz_shinku_global_country是真红的缓存国家
			#target = event_target:roz_leader_shinku_global_target@root #这个global target是玩家的真红
			target = event_target:roz_leader_shinku_global_target@root
			effect = {
				save_global_event_target_as = roz_shinku_commander_inactive_temp@root
				roz_leader_pending_negative_traits_unmodified_count = yes
				roz_leader_type_switch_clone_initiate_effect = {
					leader = shinku
					leader_sc = zhenhong
					country = shinku_global_country
				}
				#东方繁星录兼容
				if = {
					limit = { this = { spth_check_gensokyo_auth = yes } }
					set_leader_flag = own_th_leader_trait
				}
			}
		}
		#移除玩家的指挥官真红
		event_target:roz_leader_shinku_global_target@root = {
			kill_leader = {
				show_notification = no
			}
		}
		roz_leader_type_switch_create_leader_initiate_effect = {
			leader = shinku
			leader_sc = zhenhong
			leader_type = official
			symbolic_trait_1 = leader_trait_roz_shinku_main
			symbolic_trait_2 = leader_trait_roz
			symbolic_trait_3 = leader_trait_roz
		}
		
		roz_leader_initialize_after_create_effect = {
			leader = shinku
			leader_sc = zhenhong
			leader_type = official
		}
	}
}

###真红月检备份（或者说是更新备份）
roz_shinku_leader_backup = {
    if = {	#指挥官备份
        limit = {
            event_target:roz_leader_shinku_global_target@root = {
                leader_class = commander
            }
        }
        event_target:roz_shinku_commander_inactive_temp@root = { #去掉全局国家的缓存真红
            kill_leader = {
                show_notification = no
            }
        }
        clear_global_event_target = roz_shinku_commander_inactive_temp@root
        clone_leader = { #替换当前的真红（指挥官）到全局国家
            target = event_target:roz_leader_shinku_global_target@root
            effect = {
                save_global_event_target_as = roz_shinku_commander_inactive_temp@root
				roz_leader_pending_negative_traits_unmodified_count = yes
                roz_leader_type_switch_clone_initiate_effect = {
					leader = shinku
					leader_sc = zhenhong
					country = shinku_global_country
				}
				#东方繁星录兼容
				if = {
					limit = { this = { spth_check_gensokyo_auth = yes } }
					set_leader_flag = own_th_leader_trait
				}
            }
        }
    }
	if = {	#科学家备份
        limit = {
            event_target:roz_leader_shinku_global_target@root = {
                leader_class = scientist
            }
        }
        event_target:roz_shinku_scientist_inactive_temp@root = { #去掉全局国家的缓存真红
            kill_leader = {
                show_notification = no
            }
        }
        clear_global_event_target = roz_shinku_scientist_inactive_temp@root
        clone_leader = { #替换当前的真红（指挥官）到全局国家
            target = event_target:roz_leader_shinku_global_target@root
            effect = {
                save_global_event_target_as = roz_shinku_scientist_inactive_temp@root
				roz_leader_pending_negative_traits_unmodified_count = yes
                roz_leader_type_switch_clone_initiate_effect = {
					leader = shinku
					leader_sc = zhenhong
					country = shinku_global_country
				}
				#东方繁星录兼容
				if = {
					limit = { this = { spth_check_gensokyo_auth = yes } }
					set_leader_flag = own_th_leader_trait
				}
            }
        }
    }
	if = {	#行政官备份
        limit = {
            event_target:roz_leader_shinku_global_target@root = {
                leader_class = official
            }
        }
        event_target:roz_shinku_official_inactive_temp@root = { #去掉全局国家的缓存真红
            kill_leader = {
                show_notification = no
            }
        }
        clear_global_event_target = roz_shinku_official_inactive_temp@root
        clone_leader = { #替换当前的真红（指挥官）到全局国家
            target = event_target:roz_leader_shinku_global_target@root
            effect = {
                save_global_event_target_as = roz_shinku_official_inactive_temp@root
				roz_leader_pending_negative_traits_unmodified_count = yes
                roz_leader_type_switch_clone_initiate_effect = {
					leader = shinku
					leader_sc = zhenhong
					country = shinku_global_country
				}
				#东方繁星录兼容
				if = {
					limit = { this = { spth_check_gensokyo_auth = yes } }
					set_leader_flag = own_th_leader_trait
				}
            }
        }
    }
}

roz_leader_change_skin_reset_effect = {	#scope = country
    switch = {
        trigger = has_country_flag
        roz_$leader$_portrait_change_roz_$leader$_$skin_index1$ = {
            roz_leader_change_skin_flag_locate_effect = {
                who = $leader$
                portrait = roz_$leader$
                flag = roz_$leader$_portrait_change
                portrait_key = roz_$leader$_$skin_index1$
                leader_flag = roz_$leader$_flag
            }
        }    
		roz_$leader$_portrait_change_roz_$leader$_$skin_index2$ = {
            roz_leader_change_skin_flag_locate_effect = {
                who = $leader$
                portrait = roz_$leader$
                flag = roz_$leader$_portrait_change
                portrait_key = roz_$leader$_$skin_index2$
                leader_flag = roz_$leader$_flag
            }
        }
		roz_$leader$_portrait_change_roz_$leader$_$skin_index3$ = {
            roz_leader_change_skin_flag_locate_effect = {
                who = $leader$
                portrait = roz_$leader$
                flag = roz_$leader$_portrait_change
                portrait_key = roz_$leader$_$skin_index3$
                leader_flag = roz_$leader$_flag
            }
        }
		roz_$leader$_portrait_change_roz_$leader$_$skin_index4$ = {
            roz_leader_change_skin_flag_locate_effect = {
                who = $leader$
                portrait = roz_$leader$
                flag = roz_$leader$_portrait_change
                portrait_key = roz_$leader$_$skin_index4$
                leader_flag = roz_$leader$_flag
            }
        }
		roz_$leader$_portrait_change_roz_$leader$_$skin_index5$ = {
            roz_leader_change_skin_flag_locate_effect = {
                who = $leader$
                portrait = roz_$leader$
                flag = roz_$leader$_portrait_change
                portrait_key = roz_$leader$_$skin_index5$
                leader_flag = roz_$leader$_flag
            }
        }
		roz_$leader$_portrait_change_roz_$leader$_$skin_index6$ = {
            roz_leader_change_skin_flag_locate_effect = {
                who = $leader$
                portrait = roz_$leader$
                flag = roz_$leader$_portrait_change
                portrait_key = roz_$leader$_$skin_index6$
                leader_flag = roz_$leader$_flag
            }
        }
		roz_$leader$_portrait_change_roz_$leader$_$skin_index7$ = {
            roz_leader_change_skin_flag_locate_effect = {
                who = $leader$
                portrait = roz_$leader$
                flag = roz_$leader$_portrait_change
                portrait_key = roz_$leader$_$skin_index7$
                leader_flag = roz_$leader$_flag
            }
        }
		roz_$leader$_portrait_change_roz_$leader$_$skin_index8$ = {
            roz_leader_change_skin_flag_locate_effect = {
                who = $leader$
                portrait = roz_$leader$
                flag = roz_$leader$_portrait_change
                portrait_key = roz_$leader$_$skin_index9$
                leader_flag = roz_$leader$_flag
            }
        }
		roz_$leader$_portrait_change_roz_$leader$_$skin_index9$ = {
            roz_leader_change_skin_flag_locate_effect = {
                who = $leader$
                portrait = roz_$leader$
                flag = roz_$leader$_portrait_change
                portrait_key = roz_$leader$_$skin_index9$
                leader_flag = roz_$leader$_flag
            }
        }
		roz_$leader$_portrait_change_roz_$leader$_$skin_index10$ = {
            roz_leader_change_skin_flag_locate_effect = {
                who = $leader$
                portrait = roz_$leader$
                flag = roz_$leader$_portrait_change
                portrait_key = roz_$leader$_$skin_index10$
                leader_flag = roz_$leader$_flag
            }
        }
		roz_$leader$_portrait_change_roz_$leader$_$skin_index11$ = {
            roz_leader_change_skin_flag_locate_effect = {
                who = $leader$
                portrait = roz_$leader$
                flag = roz_$leader$_portrait_change
                portrait_key = roz_$leader$_$skin_index11$
                leader_flag = roz_$leader$_flag
            }
        }    
		roz_$leader$_portrait_change_roz_$leader$_$skin_index12$ = {
            roz_leader_change_skin_flag_locate_effect = {
                who = $leader$
                portrait = roz_$leader$
                flag = roz_$leader$_portrait_change
                portrait_key = roz_$leader$_$skin_index12$
                leader_flag = roz_$leader$_flag
            }
        }
		roz_$leader$_portrait_change_roz_$leader$_$skin_index13$ = {
            roz_leader_change_skin_flag_locate_effect = {
                who = $leader$
                portrait = roz_$leader$
                flag = roz_$leader$_portrait_change
                portrait_key = roz_$leader$_$skin_index13$
                leader_flag = roz_$leader$_flag
            }
        }
		roz_$leader$_portrait_change_roz_$leader$_$skin_index14$ = {
            roz_leader_change_skin_flag_locate_effect = {
                who = $leader$
                portrait = roz_$leader$
                flag = roz_$leader$_portrait_change
                portrait_key = roz_$leader$_$skin_index14$
                leader_flag = roz_$leader$_flag
            }
        }
		roz_$leader$_portrait_change_roz_$leader$_$skin_index15$ = {
            roz_leader_change_skin_flag_locate_effect = {
                who = $leader$
                portrait = roz_$leader$
                flag = roz_$leader$_portrait_change
                portrait_key = roz_$leader$_$skin_index15$
                leader_flag = roz_$leader$_flag
            }
        }
		roz_$leader$_portrait_change_roz_$leader$_$skin_index16$ = {
            roz_leader_change_skin_flag_locate_effect = {
                who = $leader$
                portrait = roz_$leader$
                flag = roz_$leader$_portrait_change
                portrait_key = roz_$leader$_$skin_index16$
                leader_flag = roz_$leader$_flag
            }
        }
		roz_$leader$_portrait_change_roz_$leader$_$skin_index17$ = {
            roz_leader_change_skin_flag_locate_effect = {
                who = $leader$
                portrait = roz_$leader$
                flag = roz_$leader$_portrait_change
                portrait_key = roz_$leader$_$skin_index17$
                leader_flag = roz_$leader$_flag
            }
        }
		roz_$leader$_portrait_change_roz_$leader$_$skin_index18$ = {
            roz_leader_change_skin_flag_locate_effect = {
                who = $leader$
                portrait = roz_$leader$
                flag = roz_$leader$_portrait_change
                portrait_key = roz_$leader$_$skin_index18$
                leader_flag = roz_$leader$_flag
            }
        }
		roz_$leader$_portrait_change_roz_$leader$_$skin_index19$ = {
            roz_leader_change_skin_flag_locate_effect = {
                who = $leader$
                portrait = roz_$leader$
                flag = roz_$leader$_portrait_change
                portrait_key = roz_$leader$_$skin_index19$
                leader_flag = roz_$leader$_flag
            }
        }
		roz_$leader$_portrait_change_roz_$leader$_$skin_index20$ = {
            roz_leader_change_skin_flag_locate_effect = {
                who = $leader$
                portrait = roz_$leader$
                flag = roz_$leader$_portrait_change
                portrait_key = roz_$leader$_$skin_index20$
                leader_flag = roz_$leader$_flag
            }
        }
		roz_$leader$_portrait_change_roz_$leader$_$skin_index21$ = {
            roz_leader_change_skin_flag_locate_effect = {
                who = $leader$
                portrait = roz_$leader$
                flag = roz_$leader$_portrait_change
                portrait_key = roz_$leader$_$skin_index21$
                leader_flag = roz_$leader$_flag
            }
        }
		roz_$leader$_portrait_change_roz_$leader$_$skin_index22$ = {
            roz_leader_change_skin_flag_locate_effect = {
                who = $leader$
                portrait = roz_$leader$
                flag = roz_$leader$_portrait_change
                portrait_key = roz_$leader$_$skin_index22$
                leader_flag = roz_$leader$_flag
            }
        }
		roz_$leader$_portrait_change_roz_$leader$_$skin_index23$ = {
            roz_leader_change_skin_flag_locate_effect = {
                who = $leader$
                portrait = roz_$leader$
                flag = roz_$leader$_portrait_change
                portrait_key = roz_$leader$_$skin_index23$
                leader_flag = roz_$leader$_flag
            }
        }
    }
}

roz_leader_change_skin_reset_shinku_effect = {
    switch = {
        trigger = has_country_flag
        roz_shinku_portrait_change_roz_shinku_20th = {
            roz_leader_change_skin_flag_locate_effect = {
                who = shinku
                portrait = roz_shinku
                flag = roz_shinku_portrait_change
                portrait_key = roz_shinku_20th
                leader_flag = roz_shinku_flag
            }
        }
        roz_shinku_portrait_change_roz_shinku_01 = {
            roz_leader_change_skin_flag_locate_effect = {
                who = shinku
                portrait = roz_shinku
                flag = roz_shinku_portrait_change
                portrait_key = roz_shinku_01
                leader_flag = roz_shinku_flag
            }
        }
    }
}

###雏莓初始化
roz_hinaichigo_leader_initiate = {
	optimize_memory
	create_leader = {
		class = official
		name = "NAME_hinaichigo"
		skill = 1
		gender = female
		species = owner_main_species
		immortal = yes
		event_leader = yes
		set_age = 17
		traits = {  }
		#randomize_traits = no
		hide_age = yes
		skip_background_generation = yes
		custom_catch_phrase = hinaichigo_gov_catch_phrase
		custom_description = hinaichigo_backstory
		effect = {
			add_skill_without_trait_selection = 1
			remove_all_traits = yes
			roz_leader_name_set_effect = {
				who_jp = hinaichigo
				who_sc = chumei
			}
			change_leader_portrait = roz_hinaichigo_20th
		}
	}
	last_created_leader = {
		save_global_event_target_as = roz_leader_hinaichigo_global_target@root
		unassign_leader = this
		set_variable = {
			##好感状态初始化
			which = roz_hinaichigo_affection
			value = 10
		}
		add_trait = { trait = leader_trait_roz_hinaichigo_main }
		random_list = {
			1 = { add_trait = { trait = leader_trait_armorer } }
			1 = { add_trait = { trait = leader_trait_military_overseer } }
			1 = { add_trait = { trait = leader_trait_master_gunner } }
			1 = { add_trait = { trait = leader_trait_destiny_engineer } }
			1 = { add_trait = { trait = leader_trait_guerilla_tactics } }
			1 = { add_trait = { trait = leader_trait_survivalist } }
			1 = { add_trait = { trait = leader_trait_maven_of_war } }
			1 = { add_trait = { trait = leader_trait_peacekeeper } }
			1 = { add_trait = { trait = leader_trait_taskmaster } }
			1 = { add_trait = { trait = leader_trait_fortress_cracker } }
			1 = { add_trait = { trait = leader_trait_chainbreaker } }
			1 = { add_trait = { trait = leader_trait_chainbreaker } }
			1 = { add_trait = { trait = leader_trait_honored_warmaster } }
			1 = { add_trait = { trait = leader_trait_academia_recruiter } }
			1 = { add_trait = { trait = leader_trait_supreme_warrior } }
			1 = { add_trait = { trait = leader_trait_spymaster } }
			1 = { add_trait = { trait = leader_trait_totalitarian } }
			1 = { add_trait = { trait = leader_trait_bellicose } }
		}
		freeze_leader_age = yes
		set_leader_flag = roz_hinaichigo_flag
		set_leader_flag = legendary_leader
		set_leader_flag = immune_to_negative_traits
	}
	roz_leader_change_skin_set_flag_effect = {
		who = hinaichigo
		portrait = roz_hinaichigo
		flag = roz_hinaichigo_portrait_change
		leader_flag = roz_hinaichigo_flag
		portrait_key = roz_hinaichigo_20th
	}
	clone_leader = {
		target = event_target:roz_leader_hinaichigo_global_target@root
		effect = {
			save_global_event_target_as = roz_hinaichigo_commander_inactive_temp@root
			set_leader_flag = roz_hinaichigo_flag
			set_name = NAME_hinaichigo
			unassign_leader = this
			set_owner = event_target:roz_hinaichigo_global_country@root
		}
	}
	set_timed_country_flag = { flag = roz_hinaichigo_diplomatic_initialize_flag days = 31}
}
###雏莓-切换指挥官职位
roz_hinaichigo_leader_type_switch_commander = {
	optimize_memory
	set_country_flag = roz_hinaichigo_commander_active
	#若当前雏莓职位为行政官
	if = {
		limit = {
			event_target:roz_leader_hinaichigo_global_target@root = {
				leader_class = official
			}
		}
		remove_country_flag = roz_hinaichigo_official_active
		#缓存国家目标领袖更新替换, 先kill了再说
		event_target:roz_hinaichigo_official_inactive_temp@root = { #令临时存储国家的舰队司令雏莓消失
			kill_leader = {
				show_notification = no
			}
		}
		clear_global_event_target = roz_hinaichigo_official_inactive_temp@root
		clone_leader = {
			#替换，event_target:roz_hinaichigo_global_country是雏莓的缓存国家
			#target = event_target:roz_leader_hinaichigo_global_target@root #这个global target是玩家的雏莓
			target = event_target:roz_leader_hinaichigo_global_target@root
			effect = {
				save_global_event_target_as = roz_hinaichigo_official_inactive_temp@root
				roz_leader_pending_negative_traits_unmodified_count = yes
				roz_leader_type_switch_clone_initiate_effect = {
					leader = hinaichigo
					leader_sc = chumei
					country = hinaichigo_global_country
				}
				#东方繁星录兼容
				if = {
					limit = { this = { spth_check_gensokyo_auth = yes } }
					set_leader_flag = own_th_leader_trait
				}
			}
		}
		#移除玩家的指挥官雏莓
		event_target:roz_leader_hinaichigo_global_target@root = {
			kill_leader = {
				show_notification = no
			}
		}
		#创建或从缓存国家复制指挥官雏莓
		roz_leader_type_switch_create_leader_initiate_effect = {
			leader = hinaichigo
			leader_sc = chumei
			leader_type = commander
			symbolic_trait_1 = leader_trait_roz_hinaichigo_main
			symbolic_trait_2 = leader_trait_roz
			symbolic_trait_3 = leader_trait_roz
		}

		roz_leader_initialize_after_create_effect = {
			leader = hinaichigo
			leader_sc = chumei
			leader_type = commander
		}
	}
}
###雏莓-切换行政官职位
roz_hinaichigo_leader_type_switch_official = {
	optimize_memory
	set_country_flag = roz_hinaichigo_official_active
	#若当前雏莓职位为指挥官
	if = {
		limit = {
			event_target:roz_leader_hinaichigo_global_target@root = {
				leader_class = commander
			}
		}
		remove_country_flag = roz_hinaichigo_commander_active
		#缓存国家目标领袖更新替换, 先kill了再说
		event_target:roz_hinaichigo_commander_inactive_temp@root = { #令临时存储国家的舰队司令雏莓消失
			kill_leader = {
				show_notification = no
			}
		}
		clear_global_event_target = roz_hinaichigo_commander_inactive_temp@root
		clone_leader = {
			#替换，event_target:roz_hinaichigo_global_country是雏莓的缓存国家
			#target = event_target:roz_leader_hinaichigo_global_target@root #这个global target是玩家的雏莓
			target = event_target:roz_leader_hinaichigo_global_target@root
			effect = {
				save_global_event_target_as = roz_hinaichigo_commander_inactive_temp@root
				roz_leader_pending_negative_traits_unmodified_count = yes
				roz_leader_type_switch_clone_initiate_effect = {
					leader = hinaichigo
					leader_sc = chumei
					country = hinaichigo_global_country
				}
				#东方繁星录兼容
				if = {
					limit = { this = { spth_check_gensokyo_auth = yes } }
					set_leader_flag = own_th_leader_trait
				}
			}
		}
		#移除玩家的指挥官雏莓
		event_target:roz_leader_hinaichigo_global_target@root = {
			kill_leader = {
				show_notification = no
			}
		}
		roz_leader_type_switch_create_leader_initiate_effect = {
			leader = hinaichigo
			leader_sc = chumei
			leader_type = official
			symbolic_trait_1 = leader_trait_roz_hinaichigo_main
			symbolic_trait_2 = leader_trait_roz
			symbolic_trait_3 = leader_trait_roz
		}

		roz_leader_initialize_after_create_effect = {
			leader = hinaichigo
			leader_sc = chumei
			leader_type = official
		}
	}
}




roz_remove_shinkureilc_random_list_effect = {	#special project没有scope导致的，random不了一点
	optimize_memory
	random_list = {
		1 = { modifier = { factor = 0 NOT = { has_relic = roz_shuukan_shoujonotsukurikata_vol3 } } remove_relic = roz_shuukan_shoujonotsukurikata_vol3 }
		1 = { modifier = { factor = 0 NOT = { has_relic = roz_shuukan_shoujonotsukurikata_vol4 } } remove_relic = roz_shuukan_shoujonotsukurikata_vol4 }
		1 = { modifier = { factor = 0 NOT = { has_relic = roz_shuukan_shoujonotsukurikata_vol5 } } remove_relic = roz_shuukan_shoujonotsukurikata_vol5 }
		1 = { modifier = { factor = 0 NOT = { has_relic = roz_shuukan_shoujonotsukurikata_vol6 } } remove_relic = roz_shuukan_shoujonotsukurikata_vol6 }
		1 = { modifier = { factor = 0 NOT = { has_relic = roz_shuukan_shoujonotsukurikata_vol7 } } remove_relic = roz_shuukan_shoujonotsukurikata_vol7 }
		1 = { modifier = { factor = 0 NOT = { has_relic = roz_shuukan_shoujonotsukurikata_vol8 } } remove_relic = roz_shuukan_shoujonotsukurikata_vol8 }
		1 = { modifier = { factor = 0 NOT = { has_relic = roz_shuukan_shoujonotsukurikata_vol9 } } remove_relic = roz_shuukan_shoujonotsukurikata_vol9 }
	}
}

roz_remove_shinkureilc_effect = {	#special project没有scope导致的
	optimize_memory
	switch = {
		trigger = has_country_flag
		roz_shoujonotsukurikata_project_2_complete = { remove_country_flag = roz_shoujonotsukurikata_project_2_complete remove_relic = roz_shuukan_shoujonotsukurikata_vol2 }
		roz_shoujonotsukurikata_project_3_complete = { remove_country_flag = roz_shoujonotsukurikata_project_3_complete remove_relic = roz_shuukan_shoujonotsukurikata_vol3 }
		roz_shoujonotsukurikata_project_4_complete = { remove_country_flag = roz_shoujonotsukurikata_project_4_complete remove_relic = roz_shuukan_shoujonotsukurikata_vol4 }
		roz_shoujonotsukurikata_project_5_complete = { remove_country_flag = roz_shoujonotsukurikata_project_5_complete remove_relic = roz_shuukan_shoujonotsukurikata_vol5 }
		roz_shoujonotsukurikata_project_6_complete = { remove_country_flag = roz_shoujonotsukurikata_project_6_complete remove_relic = roz_shuukan_shoujonotsukurikata_vol6 }
		roz_shoujonotsukurikata_project_7_complete = { remove_country_flag = roz_shoujonotsukurikata_project_7_complete remove_relic = roz_shuukan_shoujonotsukurikata_vol7 }
		roz_shoujonotsukurikata_project_8_complete = { remove_country_flag = roz_shoujonotsukurikata_project_8_complete remove_relic = roz_shuukan_shoujonotsukurikata_vol8 }
		roz_shoujonotsukurikata_project_9_complete = { remove_country_flag = roz_shoujonotsukurikata_project_9_complete remove_relic = roz_shuukan_shoujonotsukurikata_vol9 }
		roz_shoujonotsukurikata_project_10_complete = { remove_country_flag = roz_shoujonotsukurikata_project_10_complete remove_relic = roz_shuukan_shoujonotsukurikata_vol10 }
	}
}

roz_shoujonotsukurikata_project_common_effect = {
	optimize_memory
	if = {
		limit = { check_variable = { which = roz_shinku_progress_count value = 2 } }
		country_event = { id = roz_shinku_evt.110 }
	}
	else_if = {
		limit = { check_variable = { which = roz_shinku_progress_count value <= 9 } }
		country_event = { id = roz_shinku_evt.120 }
		country_event = { id = roz_shinku_evt.130 }
	}
	else = { country_event = { id = roz_shinku_evt.140 } }
}

roz_unholy_invision_difficult_modifier_effect = {
	optimize_memory
	if = {
		limit = { event_target:global_event_country = { check_variable = { which = roz_unholy_invasion_difficulty value = $value$ } } }
		add_modifier = { modifier = roz_unholy_invasion_difficult_modifier mult = $dif_factor$ }
	}
}

roz_unholy_invision_difficult_modifier_add_effect = {
	optimize_memory
	roz_unholy_invision_difficult_modifier_effect = { value = 1 dif_factor = @roz_UID_easy }
	roz_unholy_invision_difficult_modifier_effect = { value = 2 dif_factor = @roz_UID_normal }
	roz_unholy_invision_difficult_modifier_effect = { value = 3 dif_factor = @roz_UID_hard }
	roz_unholy_invision_difficult_modifier_effect = { value = 4 dif_factor = @roz_UID_xiling }
}

roz_abyss_vass_create = {
	optimize_memory
	random_system = {
		limit = {
			NOR = {
				exists = space_owner
				space_owner = { is_regular_empire = yes }
				is_fe_cluster = yes
				has_owner = yes
				star = {
					or = {
						is_planet_class = pc_black_hole
						is_planet_class = pc_pulsar
						is_planet_class = pc_neutron_star
					}
				}
				any_neighbor_system = {
					OR = {
						exists = space_owner
						space_owner = { is_regular_empire = yes }
						has_owner = yes
						is_fe_cluster = yes
						any_neighbor_system = {
							OR = {
								exists = space_owner
								space_owner = { is_regular_empire = yes }
								has_owner = yes
								is_fe_cluster = yes
							}
						}
					}
					NOT = { has_star_flag = roz_abyss_vass_capital_star }
				}
			}
			NOT = { has_star_flag = roz_abyss_vass_capital_star }
		}
		set_star_flag = roz_abyss_vass_capital_star
		random_system_planet = {
			limit = {
				OR = {
					is_star = no
					is_asteroid = no
					is_primary_star = no
					is_moon = no
					is_colony = no
				}
				NOR = {
					is_planet_class = pc_asteroid
					is_planet_class = pc_ice_asteroid
					has_planet_flag = roz_abyss_vass_capital
				}
			}
			change_pc = pc_gaia
			set_planet_size = 22
			create_species = {
				class = random
				name = random
				portrait = random
				traits = {
					trait = random_presapient_trait
					trait = random_traits
					trait = random_traits
					trait = random_traits
					trait = random_traits
					trait = random_traits
				}
			}
			create_country = {
				type = default
				name_list = random
				name = random
				species = last_created_species
				ignore_initial_colony_error = yes
				origin = origin_default
				ethos = random
				authority = random
				civics = { civic = random civic = random }
				flag = random
				effect = {
					create_leader = {
						class = random_ruler
						species = owner_main_species
						name = random
						skill = 5
					}
					copy_techs_from = { target = root }
					add_resource = {
						minerals = 10000
						energy = 10000
						food = 3000
						consumer_goods = 1500
						alloys = 1500
						unity = 2500
						influence = 500
					}
					#set_graphical_culture = mammalian_01
					save_global_event_target_as = roz_abyss_vass_extra_$index$_target@root
					#set_country_flag = roz_abyss_vass_country
				}
			}
			set_owner = last_created_country
			set_capital = yes
			set_name = random
			set_planet_flag = roz_abyss_vass_capital
			add_building = building_capital
			add_building = building_roz_abyss_altar_unknow
			remove_building = building_colony_shelter
			while = {
				count = 30
				create_pop_group = {
					species = last_created_species
				}
			}
			while = { count = 8 add_random_non_blocker_deposit = yes }
			set_variable = {
				which = energy_districts
				value = 3
			}
			set_variable = {
				which = mining_districts
				value = 3
			}
			set_variable = {
				which = farming_districts
				value = 3
			}
			add_district_and_planet_size_if_needed_effect_amount = {
				amount = energy_districts
				district = district_generator
			}
			add_district_and_planet_size_if_needed_effect_amount = {
				amount = mining_districts
				district = district_mining
			}
			add_district_and_planet_size_if_needed_effect_amount = {
				amount = farming_districts
				district = district_farming
			}
			clear_variable = energy_districts
			clear_variable = mining_districts
			clear_variable = farming_districts

			add_zone = {
				district = mining_districts
				zone = zone_minerals
				zone_slot = 1
			}
			add_zone = {
				district = energy_districts
				zone = zone_energy
				zone_slot = 1
			}
			add_zone = {
				district = farming_districts
				zone = zone_food
				zone_slot = 1
			}
			last_created_country = {
				establish_communications_no_message = root
				set_name = random
			}
			solar_system = {
				create_starbase = {
					owner = last_created_country
					size = starbase_starport
					module = shipyard
					module = solar_panel_network
					effect = {
						set_starbase_building = {
							slot = 1
							building = naval_logistics_office
						}
					}
				}
				create_fleet = {
					effect = {
						set_owner = last_created_country
						create_ship = {
							name = random
							random_existing_design = science
						}
						set_fleet_stance = evasive
						set_location = last_created_country.capital_scope.star
					}
				}
				last_created_country = {
					create_leader = {
						name = random
						set_age = 25
						class = scientist
						skill = 1
						traits = { trait = random_trait trait = random_trait }
						species = owner_main_species
						effect = { last_created_fleet = { assign_leader = prev } }
					}
				}
				create_fleet = {
					effect = {
						set_owner = last_created_country
						create_ship = {
							name = random
							random_existing_design = constructor
						}
						set_fleet_stance = evasive
						set_location = last_created_country.capital_scope.star
					}
				}
				create_fleet = {
					effect = {
						set_owner = last_created_country
						while = {
							count = 3
							create_ship = {
								name = random
								random_existing_design = corvette
							}
						}
						set_fleet_stance = passive
						set_location = last_created_country.capital_scope.star
					}
				}
				last_created_country = {
					create_leader = {
						name = random
						set_age = 21
						class = commander
						skill = 1
						traits = { trait = random_trait trait = random_trait }
						species = owner_main_species
						effect = { last_created_fleet = { assign_leader = prev } }
					}
				}
			}
		}
	}
}

roz_abyss_vass_create_in_diff = {
	optimize_memory
	if = {
		limit = {
			NOT = { has_country_flag = roz_abyss_vass_had_created }
			has_country_flag = roz_abyss_vass_had_create_available
		}
		if = {
			limit = { event_target:global_event_country = { event_target:global_event_country = { check_variable = { which = roz_unholy_invasion_difficulty value >= 1 } } } }
			roz_abyss_vass_create = { index = 1 }
		}
		if = {
			limit = { event_target:global_event_country = { event_target:global_event_country = { check_variable = { which = roz_unholy_invasion_difficulty value >= 2 } } } }
			roz_abyss_vass_create = { index = 2 }
		}
		if = {
			limit = { event_target:global_event_country = { event_target:global_event_country = { check_variable = { which = roz_unholy_invasion_difficulty value >= 3 } } } }
			roz_abyss_vass_create = { index = 3 }
		}
		if = {
			limit = { event_target:global_event_country = { event_target:global_event_country = { check_variable = { which = roz_unholy_invasion_difficulty value >= 4 } } } }
			roz_abyss_vass_create = { index = 4 }
			roz_abyss_vass_create = { index = 5 }
		}
		set_country_flag = roz_abyss_vass_had_created
	}
}

roz_abyss_vass_extra_awaken = {
	optimize_memory
	event_target:roz_abyss_vass_extra_$index$_target@root = {
		set_country_flag = roz_abyss_vass_country
		set_subject_of = {
			who = event_target:roz_madgod_force_country@root
		}
		root = {
			create_point_of_interest = {
				id = roz_abyss_vass_country_extra_$index$
				name = roz_abyss_vass_country_name
				desc = roz_abyss_vass_country_desc
				event_chain = roz_SK_madgod_invasion_main
				location = prev.capital_scope
			}
		}
		#加buff
		roz_unholy_invision_difficult_modifier_add_effect = yes
		#join_war = overlord
		# every_playable_country = {
		# 	limit = {
		# 		#NOT = { is_at_war_with = prev }
		# 		is_default_or_fallen = yes
		# 		NOR = { has_country_flag = roz_abyss_vass_country }
		# 	}
		# 	set_hostile = prev
		# 	set_faction_hostility = { target = prev set_hostile = yes set_neutral = no set_friendly = no }
		# 	add_opinion_modifier = { modifier = opinion_roz_abyss_vass who = prev }
		# 	event_target:roz_abyss_vass_extra_$index$_target@root = { add_opinion_modifier = { modifier = opinion_roz_abyss_vass who = prev } }
		# }
	}
}

roz_abyss_vass_extra_awaken_in_diff = {
	optimize_memory
	if = {
		limit = { has_country_flag = roz_abyss_vass_had_created }
		if = {
			limit = { event_target:global_event_country = { check_variable = { which = roz_unholy_invasion_difficulty value >= 1 } } }
			roz_abyss_vass_extra_awaken = { index = 1 }
		}
		if = {
			limit = { event_target:global_event_country = { check_variable = { which = roz_unholy_invasion_difficulty value >= 2 } } }
			roz_abyss_vass_extra_awaken = { index = 2 }
		}
		if = {
			limit = { event_target:global_event_country = { check_variable = { which = roz_unholy_invasion_difficulty value >= 3 } } }
			roz_abyss_vass_extra_awaken = { index = 3 }
		}
		if = {
			limit = { event_target:global_event_country = { check_variable = { which = roz_unholy_invasion_difficulty value >= 4 } } }
			roz_abyss_vass_extra_awaken = { index = 4 }
			roz_abyss_vass_extra_awaken = { index = 5 }
		}
	}
}

roz_abyss_vass_select = {
	optimize_memory
	if = {
		limit = { event_target:global_event_country = { check_variable = { which = roz_unholy_invasion_difficulty value = $value$ } } }
		while = {
			count = $dif_factor$
			random_playable_country = {
				limit = {
					NOT = { has_country_flag = roz_abyss_vass_country }
					is_ai = yes
					is_country_type = default
					roz_is_regular_authority = yes
					roz_is_MOD_country = no
					NOR = {
						is_roz_abyss_vass_extra_country_global_target = yes
						is_country_type = roz_madgod_empire
					}
				}
				set_country_flag = roz_abyss_vass_country
				set_subject_of = { who = event_target:roz_madgod_force_country@root }
				#加buff
				roz_unholy_invision_difficult_modifier_effect = { value = $value$ dif_factor = $dif_factor$ }
				root = {
					create_point_of_interest = {
						id = roz_abyss_vass_country_$dif_factor$
						name = roz_abyss_vass_country_name
						desc = roz_abyss_vass_country_desc
						event_chain = roz_SK_madgod_invasion_main
						location = prev.capital_scope
					}
				}
			}
		}
	}
}

roz_abyss_vass_after_select = {
	optimize_memory
	every_country = { #齐宣王
		limit = {
			#NOT = { is_at_war_with = prev }
			is_default_or_fallen = yes
			NOR = {
				has_country_flag = roz_abyss_vass_country
				is_country_type = roz_madgod_empire
			}
		}
		if = { #所有宗主国对深渊宣战
			limit = { is_subject = no }
			declare_war = {
				target = event_target:roz_madgod_force_country@root
				name = { key = roz_abyss_war }
				attacker_war_goal = wg_roz_abyss_war
			}
		}
		else = { join_war = overlord } #所有附属国加入战争
	}
	every_playable_country = {
		limit = {
			has_country_flag = roz_abyss_vass_country
		}
		every_playable_country = {
			limit = {
				NOR = { has_country_flag = roz_abyss_vass_country }
			}
			set_hostile = prev
			set_faction_hostility = { target = prev set_hostile = yes set_neutral = no set_friendly = no }
			add_opinion_modifier = { modifier = opinion_roz_abyss_vass who = prev }
			prev = { add_opinion_modifier = { modifier = opinion_roz_abyss_vass_hostile who = this } }
		}
		set_hostile = prev
		set_faction_hostility = { target = prev set_hostile = yes set_neutral = no set_friendly = no }
		join_war = overlord
		# root = {
		# 	create_point_of_interest = {
		# 		id = roz_abyss_vass_country
		# 		name = roz_abyss_vass_country_name
		# 		desc = roz_abyss_vass_country_desc
		# 		event_chain = roz_SK_madgod_invasion_main
		# 		location = prev.capital_scope
		# 	}
		# }
	}
}

roz_abyss_vass_select_diff = {
	optimize_memory
	roz_abyss_vass_select = { value = 1 dif_factor = 0 }
	roz_abyss_vass_select = { value = 2 dif_factor = 1 }
	roz_abyss_vass_select = { value = 3 dif_factor = 3 }
	roz_abyss_vass_select = { value = 4 dif_factor = 5 }

	roz_abyss_vass_after_select = yes
}

roz_abyss_ship_random_create = {
	optimize_memory
	while = {
		count = $num_ships$
		random_list = {
			1 = {
				create_ship = {
					name = NAME_roz_abyss_$name1$
					design = roz_crisis_ship_$design$
					prefix = no
				}
			}
			1 = {
				create_ship = {
					name = NAME_roz_abyss_$name2$
					design = roz_crisis_ship_$design$
					prefix = no
				}
			}
			1 = {
				create_ship = {
					name = NAME_roz_abyss_$name3$
					design = roz_crisis_ship_$design$
					prefix = no
				}
			}
			1 = {
				create_ship = {
					name = NAME_roz_abyss_$name4$
					design = roz_crisis_ship_$design$
					prefix = no
				}
			}
		}
	}
}

roz_abyss_ship_create = {
	optimize_memory
	while = {
		count = $num_ships$
		create_ship = {
			name = $name$
			design = roz_crisis_ship_$design$
			prefix = no
			effect = {
				set_ship_flag = roz_abyss_ship_flag
				if = {
					limit = { has_global_flag = roz_abyss_challenge_available }
					if = {
						limit = { event_target:global_event_country = { check_variable = { which = roz_unholy_invasion_difficulty value = 1 } } }
						set_disable_at_health = -1
						set_variable = { which = roz_abyss_ship_revive_count value = 0 }
					}
					if = {
						limit = { event_target:global_event_country = { check_variable = { which = roz_unholy_invasion_difficulty value = 2 } } }
						set_disable_at_health = 0.05
						set_variable = { which = roz_abyss_ship_revive_count value = 1 }
					}
					if = {
						limit = { event_target:global_event_country = { check_variable = { which = roz_unholy_invasion_difficulty value = 3 } } }
						set_disable_at_health = 0.05
						set_variable = { which = roz_abyss_ship_revive_count value = 3 }
					}
					if = {
						limit = { event_target:global_event_country = { check_variable = { which = roz_unholy_invasion_difficulty value = 4 } } }
						set_disable_at_health = 0.05
						set_variable = { which = roz_abyss_ship_revive_count value = 5 }
					}
				}
			}
		}
	}
}

roz_abyss_leader_create = {
	optimize_memory
	event_target:roz_madgod_force_country@root = {
		create_leader = {
			name = $name$
			class = $leader_class$
			skill = $skills$
			set_age = 9527
			custom_catch_phrase = roz_abyss_leader_ccp
			custom_description = roz_abyss_leader_cd
			hide_age = yes
			immortal = yes
			skip_background_generation = yes
			effect = {
				change_leader_portrait = roz_exd_$color$
				freeze_leader_age = yes
				add_trait = { trait = $trait1$ }
			}
			randomize_traits = yes
		}
	}
}

roz_abyss_leader_assign = {
	optimize_memory
	last_created_leader = { set_owner = prev.owner }
	set_leader = last_created_leader
}

roz_abyss_fleet_invision_action_1 = {
	optimize_memory
	queue_actions = {
		repeat = {
			wait = { duration = 5 }
			find_closest_system = {
				trigger = {
					id = roz_abyss_crisis_fleet_action_standard_trigger.1
					any_system_planet = { roz_planet_can_bombed_by_abyss_crisis = yes }
				}
				found_system = {
					move_to = this
					effect = {
						id = roz_abyss_crisis_fleet_action_standard_effect.1
					}
				}
			}
			# find_closest_planet = {
			# 	trigger = {
			# 		id = roz_abyss_crisis_fleet_action_standard_trigger.2
			# 		is_colony = yes
			# 		space_owner = { is_ai = no }
			# 	}
			# 	found_planet = {
			# 		orbit_planet = THIS
			# 		wait = {
			# 			duration = 50
			# 			random = 25
			# 		}
			# 	}
			# }
			# find_closest_system = {
			# 	trigger = {
			# 		id = roz_abyss_crisis_fleet_action_standard_trigger.3
			# 		NOT = {
			# 			space_owner = { NOT = { has_country_flag = roz_abyss_vass_country } }
			# 		}
			# 	}
			# 	found_system = {
			# 		move_to = this
			# 		find_closest_planet = {
			# 			trigger = {
			# 				id = roz_abyss_crisis_fleet_action_standard_trigger.4
			# 				is_colony = yes
			# 				owner = { NOT = { has_country_flag = roz_abyss_vass_country } }
			# 			}
			# 			found_planet = {
			# 				orbit_planet = THIS
			# 				wait = {
			# 					duration = 50
			# 					random = 25
			# 				}
			# 				effect = {
			# 					id = roz_abyss_crisis_fleet_action_standard_trigger.5
			# 					prevprev = {
			# 						roz_abyss_fleet_invision_action_2 = yes
			# 					}
			# 				}
			# 			}
			# 		}
			# 	}
			# }
		}
	}
}

roz_abyss_fleet_invision_action_on_entering_system = {
	optimize_memory
	queue_actions = {
		repeat = {
			while = {
				id = roz_abyss_crisis_fleet_action_standard_trigger.2
				space_owner = { NOT = { has_country_flag = roz_abyss_vass_country } }
				solar_system = { any_system_planet = { is_colony = yes } }
			}
			find_closest_planet = {
				trigger = {
					id = roz_abyss_crisis_fleet_action_standard_trigger.2
					space_owner = { NOT = { has_country_flag = roz_abyss_vass_country } }
					is_colony = yes
				}
				found_planet = {
					orbit_planet = THIS
					wait = {
						duration = 60
						random = 25
					}
				}
			}
		}
	}
}

#scope: fleet
roz_abyss_fleet_create_small = {
	optimize_memory
	roz_abyss_leader_create = {
		name = random
		leader_class = admiral
		color = orange
		trait1 = leader_trait_roz_abyss_leader_1
		skills = 5
	}
	event_target:roz_madgod_force_country@root = {
		create_fleet = {
			name = "NAME_roz_abyss_small_fleet"
			settings = {
				spawn_debris = no
				is_boss = no
				can_change_leader = no
				can_disband = no
				can_upgrade = no
				can_change_composition = no
				uses_naval_capacity = no
				ai_ignore_strength = yes
			}
			effect = {
				set_fleet_bombardment_stance = roz_crisis_armageddon
				set_fleet_stance = aggressive
				set_fleet_flag = roz_abyss_fleet_small
				set_fleet_flag = roz_abyss_fleet
				#clear_fleet_actions = this
				set_owner = $owner$
				roz_abyss_ship_create = {
					num_ships = 16
					design = probe_design_A
					name = random
				}
				roz_abyss_ship_create = {
					num_ships = 2
					design = battlecruiser_design_A
					name = random
				}
				set_location = {
					target = $location$
					distance = 45
					angle = random
				}
				roz_abyss_leader_assign = yes
			}
		}
	}
}
roz_abyss_fleet_create_small_defense_in_diff = {
	optimize_memory
	while = {
		count = event_target:global_event_country.roz_unholy_invasion_difficulty
		roz_abyss_fleet_create_small = { owner = $owner$ location = $location$ }
	}
}
roz_abyss_fleet_create_small_attack_in_diff = {
	optimize_memory
	while = {
		count = event_target:global_event_country.roz_unholy_invasion_difficulty
		roz_abyss_fleet_create_small = { owner = $owner$ location = $location$ }
		last_created_fleet = {
			roz_abyss_fleet_invision_action_1 = yes
			set_fleet_flag = roz_abyss_attack_fleet_small
		}
	}
}

#scope: fleet
roz_abyss_fleet_create_median = {
	optimize_memory
	roz_abyss_leader_create = {
		name = random
		leader_class = admiral
		color = orange
		trait1 = leader_trait_roz_abyss_leader_1
		skills = 5
	}
	event_target:roz_madgod_force_country@root = {
		create_fleet = {
			#name = random
			settings = {
				spawn_debris = no
				is_boss = no
				can_change_leader = no
				can_disband = no
				can_upgrade = no
				can_change_composition = no
				uses_naval_capacity = no
				ai_ignore_strength = yes
			}
			effect = {
				set_fleet_bombardment_stance = roz_crisis_armageddon
				set_fleet_stance = aggressive
				set_fleet_flag = roz_abyss_fleet_median
				set_fleet_flag = roz_abyss_fleet
				#clear_fleet_actions = this

				set_owner = $owner$
				roz_abyss_ship_create = {
					num_ships = 16
					design = probe_design_A
					name = random
				}
				roz_abyss_ship_create = {
					num_ships = 8
					design = battlecruiser_design_A
					name = random
				}
				roz_abyss_ship_create = {
					num_ships = 2
					design = titan_design_A
					name = random
				}
				set_location = {
					target = $location$
					distance = 45
					angle = random
				}
				roz_abyss_leader_assign = yes
			}
		}
	}
}
roz_abyss_fleet_create_median_defense_in_diff = {
	optimize_memory
	while = {
		count = event_target:global_event_country.roz_unholy_invasion_difficulty
		roz_abyss_fleet_create_median = { owner = $owner$ location = $location$ }
	}

}
roz_abyss_fleet_create_median_attack_in_diff = {
	optimize_memory
	while = {
		count = event_target:global_event_country.roz_unholy_invasion_difficulty
		roz_abyss_fleet_create_median = { owner = $owner$ location = $location$ }
		last_created_fleet = {
			roz_abyss_fleet_invision_action_1 = yes
			set_fleet_flag = roz_abyss_attack_fleet_median
		}
	}
}

#scope: fleet
roz_abyss_fleet_create_large = {
	optimize_memory
	roz_abyss_leader_create = {
		name = random
		leader_class = admiral
		color = orange
		trait1 = leader_trait_roz_abyss_leader_1
		skills = 7
	}
	event_target:roz_madgod_force_country@root = {
		create_fleet = {
			#name = random
			settings = {
				spawn_debris = no
				is_boss = no
				can_change_leader = no
				can_disband = no
				can_upgrade = no
				can_change_composition = no
				uses_naval_capacity = no
				ai_ignore_strength = yes
			}
			effect = {
				set_fleet_bombardment_stance = roz_crisis_armageddon
				set_fleet_stance = aggressive
				set_fleet_flag = roz_abyss_fleet_large
				set_fleet_flag = roz_abyss_fleet
				#clear_fleet_actions = this

				set_owner = $owner$
				roz_abyss_ship_create = {
					num_ships = 16
					design = battlecruiser_design_A
					name = random
				}
				roz_abyss_ship_create = {
					num_ships = 4
					design = titan_design_A
					name = random
				}
				set_location = {
					target = $location$
					distance = 45
					angle = random
				}
				roz_abyss_leader_assign = yes
			}
		}
	}

}
roz_abyss_fleet_create_large_defense_in_diff = {
	optimize_memory
	while = {
		count = event_target:global_event_country.roz_unholy_invasion_difficulty
		roz_abyss_fleet_create_large = { owner = $owner$ location = $location$ }
	}

}
roz_abyss_fleet_create_large_attack_in_diff = {
	optimize_memory
	while = {
		count = event_target:global_event_country.roz_unholy_invasion_difficulty
		roz_abyss_fleet_create_large = { owner = $owner$ location = $location$ }
		last_created_fleet = {
			roz_abyss_fleet_invision_action_1 = yes
			set_fleet_flag = roz_abyss_attack_fleet_large
		}
	}
}

#scope: fleet
roz_abyss_fleet_create_marvelous = {
	optimize_memory
	roz_abyss_leader_create = {
		name = random
		skills = 10
		leader_class = admiral
		color = orange
		trait1 = leader_trait_roz_abyss_leader_1
	}
	event_target:roz_madgod_force_country@root = {
		create_fleet = {
			name = NAME_roz_abyss_marvelous_fleet
			settings = {
				spawn_debris = no
				is_boss = yes
				can_change_leader = no
				can_disband = no
				can_upgrade = no
				can_change_composition = no
				uses_naval_capacity = no
			}
			effect = {
				set_fleet_stance = aggressive
				#clear_fleet_actions = this
				set_fleet_bombardment_stance = roz_crisis_armageddon
				set_fleet_flag = roz_abyss_fleet_marvelous
				set_fleet_flag = roz_abyss_fleet
				set_owner = event_target:roz_madgod_force_country@root
				roz_abyss_ship_create = {
					num_ships = 24
					design = battlecruiser_design_A
					name = random
				}
				roz_abyss_ship_create = {
					num_ships = 12
					design = titan_design_A
					name = random
				}
				set_location = {
					target = event_target:roz_outland_planet@root
					distance = 45
					angle = random
				}
				roz_abyss_leader_assign = yes
			}
		}
	}

}
roz_abyss_fleet_create_marvelous_defense_in_diff = {
	optimize_memory
	while = {
		count = event_target:global_event_country.roz_unholy_invasion_difficulty
		roz_abyss_fleet_create_marvelous = yes
	}
}
roz_abyss_fleet_create_marvelous_attack_in_diff = {
	optimize_memory
	while = {
		count = event_target:global_event_country.roz_unholy_invasion_difficulty
		roz_abyss_fleet_create_marvelous = yes
		last_created_fleet = {
			roz_abyss_fleet_invision_action_1 = yes
			set_fleet_flag = roz_abyss_attack_fleet_marvelous
		}
	}
}

#scope: fleet
roz_abyss_fleet_create_madgod_boss = {
	optimize_memory
	roz_abyss_leader_create = {
		name = NAME_roz_Uranus
		leader_class = admiral
		color = red
		trait1 = leader_trait_roz_abyss_leader_Uranus
		skills = 10
	}
	event_target:roz_madgod_force_country@root = {
		create_fleet = {
			name = NAME_roz_abyss_madgod_boss
			settings = {
				spawn_debris = no
				is_boss = yes
				can_change_leader = no
				can_disband = no
				can_upgrade = no
				can_change_composition = no
				uses_naval_capacity = no
			}
			effect = {
				set_fleet_bombardment_stance = roz_crisis_armageddon
				set_fleet_stance = passive
				set_fleet_flag = roz_abyss_fleet_madgod_boss
				set_fleet_flag = roz_abyss_fleet
				set_owner = event_target:roz_madgod_force_country@root
				roz_abyss_ship_create = {
					num_ships = 8
					design = titan_design_A
					name = random
				}
				create_ship = {
					name = NAME_roz_abyss_madgod_boss
					design = roz_crisis_madgod_boss_design_A
					prefix = no
					effect = {
						set_disable_at_health = 0.05
						set_ship_flag = roz_crisis_madgod_boss
					}
				}
				set_location = {
					target = event_target:roz_outland_planet@root
					distance = 45
					angle = random
				}
				roz_abyss_leader_assign = yes
			}
		}
	}

}

###
roz_abyss_fleet_outpost_create = {
	optimize_memory
	random_system = {
		limit = {
			space_owner = { is_ai = yes }
			NOT = { has_star_flag = roz_abyss_fleet_outpost_system }
			any_system_planet = { is_colony = no }
			closest_system = {
				min_steps = 0 max_steps = 1
				any_system_planet = { is_colony = no }
				NOT = { has_star_flag = roz_abyss_fleet_outpost_system }
			}
		}
		random_system_planet = {
			limit = {
				has_owner = no
				is_colony = no
				has_anomaly = no
				NOR = {
					exists = archaeological_site
					has_planet_flag = hatchling_egg
				}
				OR = {
					is_planet_class = pc_molten
					is_planet_class = pc_barren
					is_planet_class = pc_barren_cold
					is_planet_class = pc_toxic
					is_planet_class = pc_frozen
					is_planet_class = pc_nuked
				}
			}
			set_name = "NAME_roz_abyss_fleet_outpost"						#_星球改名
			change_pc = pc_black_hole
			set_planet_size = 1
			clear_deposits = yes
			#add_deposit = ge_sgt_depo	#_添加deposit
			set_planet_flag = roz_abyss_fleet_outpost@root
			save_global_event_target_as = roz_abyss_fleet_outpost_target_$num$_@root
			solar_system = { set_star_flag = roz_abyss_fleet_outpost_system }
			root = {
				create_point_of_interest = {
					id = roz_abyss_fleet_outpost_$num$
					name = roz_abyss_fleet_outpost_target
					desc = roz_abyss_fleet_outpost_target_desc
					event_chain = roz_SK_madgod_invasion_main
					location = prev
				}
			}
			roz_abyss_fleet_create_large_defense_in_diff = { owner = event_target:roz_madgod_force_country@root location = event_target:roz_abyss_fleet_outpost_target_$num$_@root }
			roz_abyss_fleet_create_marvelous = yes last_created_fleet = { set_location = event_target:roz_abyss_fleet_outpost_target_$num$_@root }
		}
	}
}
roz_abyss_fleet_outpost_create_in_diff = {
	optimize_memory
	if = {
		limit = { event_target:global_event_country = { check_variable = { which = roz_unholy_invasion_difficulty value >= 1 } } }
		roz_abyss_fleet_outpost_create = { num = 1 }
	}
	if = {
		limit = { event_target:global_event_country = { check_variable = { which = roz_unholy_invasion_difficulty value >= 2 } } }
		roz_abyss_fleet_outpost_create = { num = 2 }
	}
	if = {
		limit = { event_target:global_event_country = { check_variable = { which = roz_unholy_invasion_difficulty value >= 3 } } }
		roz_abyss_fleet_outpost_create = { num = 3 }
	}
	if = {
		limit = { event_target:global_event_country = { check_variable = { which = roz_unholy_invasion_difficulty value >= 4 } } }
		roz_abyss_fleet_outpost_create = { num = 4 }
		roz_abyss_fleet_outpost_create = { num = 5 }
	}
}

#避免使用遍历，希望这样性能可以好一些
roz_abyss_madgod_hunter_fleet_create_count_in_diff = {
	optimize_memory
	if = {
		limit = { event_target:global_event_country = { check_variable = { which = roz_unholy_invasion_difficulty value = $diff$ } } }
		while = { count = $num3$ roz_abyss_fleet_create_large_attack_in_diff  = { owner = event_target:roz_madgod_force_country@root location = event_target:roz_abyss_fleet_outpost_target_$outpost$_@root } }
		while = { count = $num2$ roz_abyss_fleet_create_median_attack_in_diff = { owner = event_target:roz_madgod_force_country@root location = event_target:roz_abyss_fleet_outpost_target_$outpost$_@root } }
		while = { count = $num$ roz_abyss_fleet_create_small_attack_in_diff  = { owner = event_target:roz_madgod_force_country@root location = event_target:roz_abyss_fleet_outpost_target_$outpost$_@root } }
	}
}

#scope: country(player)
#5层了，不能再套娃了
#深渊疯神 哨站挨个刷舰队
roz_abyss_madgod_hunter_fleet_create_establish_in_diff = {
	optimize_memory
	if = {
		limit = { event_target:global_event_country = { check_variable = { which = roz_unholy_invasion_difficulty value >= 1 } } }
		roz_abyss_madgod_hunter_fleet_create_count_in_diff = { diff = 1 outpost = 1  num = 2 num2 = 1 num3 = 0 }
		roz_abyss_madgod_hunter_fleet_create_count_in_diff = { diff = 2 outpost = 1  num = 2 num2 = 1 num3 = 0 }
		roz_abyss_madgod_hunter_fleet_create_count_in_diff = { diff = 3 outpost = 1  num = 1 num2 = 1 num3 = 1 }
		roz_abyss_madgod_hunter_fleet_create_count_in_diff = { diff = 4 outpost = 1  num = 0 num2 = 1 num3 = 1 }
	}
	if = {
		limit = { event_target:global_event_country = { check_variable = { which = roz_unholy_invasion_difficulty value >= 2 } } }
		roz_abyss_madgod_hunter_fleet_create_count_in_diff = { diff = 1 outpost = 2  num = 2 num2 = 1 num3 = 0 }
		roz_abyss_madgod_hunter_fleet_create_count_in_diff = { diff = 2 outpost = 2  num = 2 num2 = 1 num3 = 0 }
		roz_abyss_madgod_hunter_fleet_create_count_in_diff = { diff = 3 outpost = 2  num = 1 num2 = 1 num3 = 1 }
		roz_abyss_madgod_hunter_fleet_create_count_in_diff = { diff = 4 outpost = 2  num = 0 num2 = 1 num3 = 1 }
	}
	if = {
		limit = { event_target:global_event_country = { check_variable = { which = roz_unholy_invasion_difficulty value >= 3 } } }
		roz_abyss_madgod_hunter_fleet_create_count_in_diff = { diff = 1 outpost = 3  num = 2 num2 = 1 num3 = 0 }
		roz_abyss_madgod_hunter_fleet_create_count_in_diff = { diff = 2 outpost = 3  num = 2 num2 = 1 num3 = 0 }
		roz_abyss_madgod_hunter_fleet_create_count_in_diff = { diff = 3 outpost = 3  num = 1 num2 = 1 num3 = 1 }
		roz_abyss_madgod_hunter_fleet_create_count_in_diff = { diff = 4 outpost = 3  num = 0 num2 = 1 num3 = 1 }
	}
	if = {
		limit = { event_target:global_event_country = { check_variable = { which = roz_unholy_invasion_difficulty value >= 4 } } }
		roz_abyss_madgod_hunter_fleet_create_count_in_diff = { diff = 1 outpost = 4  num = 2 num2 = 1 num3 = 0 }
		roz_abyss_madgod_hunter_fleet_create_count_in_diff = { diff = 2 outpost = 4  num = 2 num2 = 1 num3 = 0 }
		roz_abyss_madgod_hunter_fleet_create_count_in_diff = { diff = 3 outpost = 4  num = 1 num2 = 1 num3 = 1 }
		roz_abyss_madgod_hunter_fleet_create_count_in_diff = { diff = 4 outpost = 4  num = 0 num2 = 1 num3 = 1 }

		roz_abyss_madgod_hunter_fleet_create_count_in_diff = { diff = 1 outpost = 5  num = 2 num2 = 1 num3 = 0 }
		roz_abyss_madgod_hunter_fleet_create_count_in_diff = { diff = 2 outpost = 5  num = 2 num2 = 1 num3 = 0 }
		roz_abyss_madgod_hunter_fleet_create_count_in_diff = { diff = 3 outpost = 5  num = 1 num2 = 1 num3 = 1 }
		roz_abyss_madgod_hunter_fleet_create_count_in_diff = { diff = 4 outpost = 5  num = 0 num2 = 1 num3 = 1 }
	}
}
#执行
roz_abyss_vass_hunter_fleet_create_count_in_diff = {
	optimize_memory
	if = {
		limit = { event_target:global_event_country = { check_variable = { which = roz_unholy_invasion_difficulty value = $diff$ } } }
		every_playable_country = {
			limit = { has_country_flag = roz_abyss_vass_country }
			while = { count = $num2$ roz_abyss_fleet_create_median_defense_in_diff = { owner = prevprevprev location = prevprevprev.capital_scope } }
			while = { count = $num$ roz_abyss_fleet_create_small_defense_in_diff  = { owner = prevprevprev location = prevprevprev.capital_scope } }
		}
	}
}

#scope: country(player)
#深渊仆从刷舰队 5层了，不能再套娃了
roz_abyss_vass_hunter_fleet_create_establish_in_diff = {
	optimize_memory
	roz_abyss_vass_hunter_fleet_create_count_in_diff = { diff = 1 num = 1 num2 = 0 }
	roz_abyss_vass_hunter_fleet_create_count_in_diff = { diff = 2 num = 1 num2 = 0 }
	roz_abyss_vass_hunter_fleet_create_count_in_diff = { diff = 3 num = 1 num2 = 0 }
	roz_abyss_vass_hunter_fleet_create_count_in_diff = { diff = 4 num = 1 num2 = 1 }
}

#scope: country(player)
#深渊势力可刷船的起始次数
roz_abyss_hunter_fleet_create_can_establish_num_in_diff = {
	optimize_memory
	if = {
		limit = { event_target:global_event_country = { check_variable = { which = roz_unholy_invasion_difficulty value = 1 } } }
		set_variable = { which = roz_abyss_hunter_fleet_create_can_establish value = 5 }
	}
	if = {
		limit = { event_target:global_event_country = { check_variable = { which = roz_unholy_invasion_difficulty value = 2 } } }
		set_variable = { which = roz_abyss_hunter_fleet_create_can_establish value = 7 }
	}
	if = {
		limit = { event_target:global_event_country = { check_variable = { which = roz_unholy_invasion_difficulty value = 3 } } }
		set_variable = { which = roz_abyss_hunter_fleet_create_can_establish value = 10 }
	}
	if = {
		limit = { event_target:global_event_country = { check_variable = { which = roz_unholy_invasion_difficulty value = 4 } } }
		set_variable = { which = roz_abyss_hunter_fleet_create_can_establish value = 15 }
	}
}

roz_abyss_hunter_fleet_create_cd_in_diff = {
	optimize_memory
	#
	if = {
		limit = { check_variable = { which = roz_abyss_hunter_fleet_create_can_establish value > 0 } }
		subtract_variable = { which = roz_abyss_hunter_fleet_create_can_establish value = 1 }
		if = {
			limit = { event_target:global_event_country = { check_variable = { which = roz_unholy_invasion_difficulty value = 1 } } }
			set_timed_country_flag = { flag = roz_abyss_hunter_fleet_create_cd years = 4 }
		}
		if = {
			limit = { event_target:global_event_country = { check_variable = { which = roz_unholy_invasion_difficulty value = 2 } } }
			set_timed_country_flag = { flag = roz_abyss_hunter_fleet_create_cd years = 3 }
		}
		if = {
			limit = { event_target:global_event_country = { check_variable = { which = roz_unholy_invasion_difficulty value = 3 } } }
			set_timed_country_flag = { flag = roz_abyss_hunter_fleet_create_cd years = 2 }
		}
		if = {
			limit = { event_target:global_event_country = { check_variable = { which = roz_unholy_invasion_difficulty value = 4 } } }
			set_timed_country_flag = { flag = roz_abyss_hunter_fleet_create_cd years = 1 }
		}
	}
}

roz_abyss_hunter_fleet_create_can_establish_num_add = {
	optimize_memory
	if = {
		limit = { event_target:global_event_country = { check_variable = { which = roz_unholy_invasion_difficulty value = 1 } } }
		change_variable = { which = roz_abyss_hunter_fleet_create_can_establish value = 0.2 }
	}
}

#深渊入侵局势
#scope: situation
roz_SK_4_madgod_invasion_placard_triggerred_stage = {
	optimize_memory
	switch = {
		trigger = current_stage
		roz_SK_4_madgod_invasion_placard_stage_$current_stage$ = {
			if = {
				limit = { owner = { has_country_flag = roz_SK_4_madgod_invasion_placard_stage_$stage_prev$ } }
				owner = { set_timed_country_flag = { flag = roz_unholy_invasion_situation_$change_prev$ days = 30 } }
			}
			if = {
				limit = { owner = { has_country_flag = roz_SK_4_madgod_invasion_placard_stage_$stage_next$ } }
				owner = { set_timed_country_flag = { flag = roz_unholy_invasion_situation_$change_next$ days = 30 } }
			}
		}
	}
}
#穷举
roz_SK_4_madgod_invasion_placard_triggerred_stage_effect = {
	optimize_memory
	roz_SK_4_madgod_invasion_placard_triggerred_stage = { current_stage = minus_two stage_prev = none 		change_prev = 10 stage_next = minus_one change_next = 12 }
	roz_SK_4_madgod_invasion_placard_triggerred_stage = { current_stage = minus_one stage_prev = minus_two 	change_prev = 21 stage_next = mid 		change_next = 23 }
	roz_SK_4_madgod_invasion_placard_triggerred_stage = { current_stage = mid 		stage_prev = minus_one 	change_prev = 32 stage_next = one 		change_next = 34 }
	roz_SK_4_madgod_invasion_placard_triggerred_stage = { current_stage = one 		stage_prev = mid 		change_prev = 43 stage_next = two 		change_next = 45 }
	roz_SK_4_madgod_invasion_placard_triggerred_stage = { current_stage = two 		stage_prev = one 		change_prev = 54 stage_next = none 		change_next = 56 }
}
roz_SK_4_madgod_invasion_placard_remind_effect = {
	optimize_memory
	owner = {
		switch = {
			trigger = has_country_flag
			roz_unholy_invasion_situation_12 = { country_event = { id = roz_shinku_evt.610 days = 0 } }
			roz_unholy_invasion_situation_23 = { country_event = { id = roz_shinku_evt.611 days = 0 } }
			roz_unholy_invasion_situation_34 = { country_event = { id = roz_shinku_evt.612 days = 0 } }
			roz_unholy_invasion_situation_45 = { country_event = { id = roz_shinku_evt.613 days = 0 } }
			roz_unholy_invasion_situation_54 = { country_event = { id = roz_shinku_evt.614 days = 0 } }
			roz_unholy_invasion_situation_43 = { country_event = { id = roz_shinku_evt.615 days = 0 } }
			roz_unholy_invasion_situation_32 = { country_event = { id = roz_shinku_evt.616 days = 0 } }
			roz_unholy_invasion_situation_21 = { country_event = { id = roz_shinku_evt.617 days = 0 } }
		}
	}
}

##深渊局势失败后，将一次性清空2/3的刷兵次数，如果没有次数剩余那就保底刷一队
roz_abyss_hunter_fleet_create_when_situation_fail = {
	optimize_memory
	if = {
		limit = { check_variable = { which = roz_abyss_hunter_fleet_create_can_establish value >= 2 } }
		set_variable = { which = roz_abyss_hunter_fleet_create_can_establish_arithmetic value = roz_abyss_hunter_fleet_create_can_establish }
		multiply_variable = { which = roz_abyss_hunter_fleet_create_can_establish_arithmetic value = 0.667 }
		round_variable = roz_abyss_hunter_fleet_create_can_establish_arithmetic
		subtract_variable = { which = roz_abyss_hunter_fleet_create_can_establish value = roz_abyss_hunter_fleet_create_can_establish_arithmetic }
		while = {
			count = roz_abyss_hunter_fleet_create_can_establish_arithmetic
			roz_abyss_vass_hunter_fleet_create_establish_in_diff = yes
			roz_abyss_madgod_hunter_fleet_create_establish_in_diff = yes
		}
	}
	else_if = {
		limit = { check_variable = { which = roz_abyss_hunter_fleet_create_can_establish value < 2 } }
		while = {
			count = roz_abyss_hunter_fleet_create_can_establish
			roz_abyss_vass_hunter_fleet_create_establish_in_diff = yes
			roz_abyss_madgod_hunter_fleet_create_establish_in_diff = yes
		}
		set_variable = { which = roz_abyss_hunter_fleet_create_can_establish value = 0 }
	}
}

###深渊压制机制(双穿、减伤、舰船伤害)
#
roz_abyss_ship_is_suppressed_effect = {
	optimize_memory
	if = {
		limit = {
			check_modifier_value = {
				modifier = $modifier$
				value >= 0
			}
		}
		export_modifier_to_variable = {
			modifier = $modifier$
			variable = roz_var_$modifier$
		}
		change_variable = {
			which = roz_var_$modifier$
			value = $roz_abyss_var_temp_1|1$
		}
		add_modifier = {
			modifier = ge_basic_$modifier$
			mult = roz_var_$modifier$
			days = 1
		}
	}
	else_if = {
		limit = {
			check_modifier_value = {
				modifier = $modifier$
				value < 0
			}
			check_modifier_value = {
				modifier = $modifier$
				value > -1
			}
		}
		add_modifier = {
			modifier = ge_basic_$modifier$
			mult = $roz_abyss_var_temp_2|1$
			days = 1
		}
	}
}
roz_abyss_fleet_suppress_modifier_effect = {
	optimize_memory
	from = {
		every_owned_ship = {
			roz_abyss_ship_is_suppressed_effect = { modifier = $modifier$ roz_abyss_var_temp_1 = $roz_abyss_var_temp_1$ roz_abyss_var_temp_2 = $roz_abyss_var_temp_2$ }
			ship_event = { id = roz_shinku_evt.589 days = 1 }
		}
	}
}
